---
layout: post
title:  "git 日常使用小结"
date:   2017-04-07 10:17:31 +0800
categories: 开发笔记
---
![](http://yuqiangcoder.com/assets/postImages/ios/201704/1.png)


## Git 简介
* 分布式控制系统
  1. 版本库本地化, 支持离线提交, 相对独立不影响协同开发.
  2. 更少的 "仓库污染".
  3. 把内容按元数据方式存储, 完整克隆版本库.
  4. 支持快速切换分支方便合并, 比较合并性能好.
  5. 分布式版本库, 无单点故障, 内容完整性好.

## 开发模式

![开发模式](http://yuqiangcoder.com/assets/postImages/ios/201704/2.png)

## Git 基础命令
 - ### git 配置
    ```
    git config -l    # 查看当前配置
    git config --global user.name "YQqiang"    # 设置用户名
    git config --global user.email xxxx@gmail.com    # 设置邮箱
    git config --golbal alias.ci commit    # 设置git 命令的别名
    git config --golbal alias.co checkout    # 设置git 命令的别名
    ```

    ```
    ~/.gitconfig     # 全局配置文件
    .git    # 在库的顶级目录当中, 包含项目的所有对象, 提交记录, 配置
    .gitignore    # 记录要忽略的文件
    ```

 - ### 获得 git 仓库
    1. `git init`
    > 初始化后, 在当前目录会出现一个名为`.git`的目录. 所有`git`需要的数据和资源都存放在这个目录中. 

    2. `git clone`
    > * `git clone git@github.com:YQqiang/MoyaDemo.git`
      获取社区代码, 但是需要有相关权限才能访问 (使用 `ssh-keygen` 生成 `id_rsa` 和 `id_rsa.pub`, 将`id_rsa.pub` 添加到`authorized_keys`)
* `git clone https://github.com/YQqiang/MoyaDemo.git`
      获取`github`中提供的第三方资源

 - ### 提交文件
    
    ![提交文件](http://yuqiangcoder.com/assets/postImages/ios/201704/3.png)
    * `git status` 查看文件状态
    * 文件所处三种状态
        * `working tree`    对应.git/之外的项目文件或目录
        * `index tree` (add 后)    对应.git/index
        * `HEAD` (commit 后)
    * `HEAD` 相关意义
        * `HEAD` 代表最后一次提交
        * `HEAD^` 代表最后一次提交的父提交 等价于HEAD~1>
        * `HEAD~2` 倒数第二次提交
    ---
    * `git diff` 显示`working tree` 和 `index tree` 之间的差异
    * `git diff --staged` 用户来查看`index tree` 中的内容 和 `HEAD`中的区别
    * `git diff HEAD ` 显示`working tree` 与 `index tree` 两者之和与`HEAD`中的区别, 用来看总共的修改内容
    * `git diff file_name` 或者 `git diff dir_name/` 查看指定文件或目录的修改
    * `git diff one_commit_hash another_commit_hash` 查看两次`commit` 之间的差异
    * `git diff one_branch_name another_branch_name` 对比两个分支之间的差异
    ---
    * 跟踪新文件
    * `git add file_name`  将本地指定文件名或目录(*新增 和 修改, 没有删除*) 的文件添加到暂缓区
    * `git add .` 将本地所有的(*新增 和 修改, 没有删除*) 的文件添加到暂缓区. 同样可以使用`*`来匹配
    * `git add -u` 将本地的(*修改 和 删除, 没有新增*) 的文件添加到暂缓区
    * `git add -A` 将本地所有改动添加到暂缓区 (`git add -A  =  git add . + git add -u`)
    ---
    * `git commit -m "comment"` 提交暂缓区中的内容(已经add) 并添加注释
    * `git commit -a` 把修改的文件添加到暂缓区(不包括新建(untracked)的文件), 然后提交
    * `git commit -i`  通常在文件冲突解决以后, 提交解决的冲突时使用.
    ---
    * `git fetch` 从远程获取最新版本到本地, 不会自动`merge`
    * `git pull` 从远程获取最新版本到本地并`merge`到本地, 相当于`git fetch` 和 `git merge`
    * 在实际使用中, `git fetch` 更安全一些, 因为在`merge`前我们可以查看更新情况, 然后再决定是否合并
    ---
    * 解决冲突
        *  根据冲突提示, 逐个查找冲突文件中有冲突的地方进行手动解决
        * 使用git冲突解决工具, 如: P4merge, kdiff3
    ---
    * `git push`
    * `git push origin branch_name` 将本地分支推送到`origin`主机的某分支, 如果该分支不存在, 就新建该远程分支
    * `git push -u origin master` -u (upstream) 指定`origin` 为默认主机, 后面就可以不加任何参数使用`git push` 了
    * `git push --all origin` 将所有本地分支都推送到`origin`主机
    * `git push origin :branch_name` 删除远程分支(即推送一个空分支到主机)
    * `git push origin local:remote` 完整格式

 - ### 查看提交历史
    * `git log` 查看提交记录
    * `git log -n`  `n`是一个正整数, 查看前n次修改
    * `git log file1 file2` 查看`file1`文件, `file2`文件的提交记录
    * `git log file/` 查看`file`文件夹下所有文件的提交记录
    * `git log v1` 此时的`v1` 代表的是分支的名字
    * `git log -- v1` 此时的`v1` 代表的是名为`v1`的文件
    * `git log --oneline` 一行显示一条log
    * `git log -p` 查看详细修改内容
    * `git log --stat` 查看提交统计信息
    * `git log -graph` 显示何时出现了分支和合并等信息
    * `git log commit_id` 查询`commit_id`之前的记录, 包括`commit_id`
    * `git log commit_id_1 commit_id_2` 查询`commit_id_1` 和 `commit_id_2` 之间的记录, 包括`commit_id_1` 和 `commit_id_2` 
    * `git log commit_id_1..commit_id_2` 同上, 但是不包括`commit_id_1`
    * `git log v1.0..` 查询从`v1.0` 之后的提交历史记录(不包含`v1.0`)
    * `git log test..master` 查询`master`分支中的提交记录但不包含`test`分支记录
    * `git log master..test` 查询`test`分支中的提交记录但不包含`master`分支记录
    * `git log master...test` 查询`master`或 `test`分支中的提交记录
    * `git log test --not master` 屏蔽`master`分支
    * `git log --author='yuqiangsun'` 查询指定作者的提交记录
    * `git log --grep='日期'` 列出所有包含`日期`字样的提交信息说明的提交记录
    * `git log --name-only` 仅在提交信息后显示已修改的文件清单
    * `git log --pretty=oneline` 单行显示每次的提交(commit_id 和 注释)
    * `git log --pretty=format:"%H %an %ae %ad %s"`  格式化输出log

| 选项| 说明|
        |:-:|:-:|
        | %H | 提交对象（commit）的完整哈希字串 |
        | %T | 树对象（tree）的完整哈希字串 |
        | %t | 树对象的简短哈希字串 |
        | %P | 父对象（parent）的完整哈希字串 |
        | %p | 父对象的简短哈希字串 |
        | %an | 作者（author）的名字 |
        | %ae | 作者的电子邮件地址 |
        | %ad | 作者修订日期(可以用 -date= 选项定制格式) |
        | %ar | 作者修订日期，按多久以前的方式显示 |
        | %cn | 提交者(committer)的名字 |
        | %ce | 提交者的电子邮件地址 |
        | %cd | 提交日期 |
        | %cr | 提交日期，按多久以前的方式显示 |
        | %s | 提交说明|

 - ### 撤销操作
    
    ![Rebase](http://yuqiangcoder.com/assets/postImages/ios/201704/4.png)
    > [rebase 详解](http://gitbook.liuhui998.com/4_2.html)
 rebase 命令执行后, 实际上是将分支点从C移动了G, 这样分支也就具有了C到G的功能  
    
  ![reset](http://yuqiangcoder.com/assets/postImages/ios/201704/5.png)
  
    * `reset` 将当前的工作目录完全回滚到指定的版本号
    * `revert` 还原一个版本的修改, 必须提供一个具体git版本号
    * 区别
    * `reset` 是指将当前head的内容重置, 不会留下任何痕迹
    * `revert` 是撤销某次提交, 但是这次撤销也会作为一次提交进行保存

 - ### 打标签
    * 查看tag
        * `git tag -l` 查看所有tag, -l 可以省略
    * 创建tag
        * `git tag v1.2.4` 基于最新提交创建标签
        * `git tag -a v1.2.4 -m "tag message"`
        * `git tag -a v1.2.4 31dd771` 补打tag, 前提是记得commit
    * 分享tag
        * `git push origin tag v1.2.4`
        * `git push origin --tags` 提交所有tag到服务器
    * 删除tag
        * `git tag -d v1.2.4`删除本地tag
        * `git push origin :v1.2.4`

## 分支管理
  - ### 新建分支 (本地)
    * `git branch new_branch` 新建分支
    * `git checkout branch_name` 切换分支
    * `git checkout -b new_branch` 从当前分支新建分支(等同上面两条命令)
    * `git checkout -b new_branch commit_id ` 从某次提交点上新建分支
  - ### 新建分支 (远程)
     * `git push origin branch_name` 将本地分支推送到`origin`主机的某分支, 如果该分支不存在, 就新建该远程分支
     * `git push -u origin master` -u (upstream) 指定`origin` 为默认主机, 后面就可以不加任何参数使用`git push` 了
     * `git push origin local:remote` 完整格式
  - ### 查看分支
    * `git branch -l` 查看本地分支, -l 可以省略
    * `git branch -r` 查看远程分支
    * `git branch -a` 查看所有分支
    * `git branch -v` 查看各分支最后一次提交对象信息
    * `git branch -vv`
  - ### 修改分支
    * `git branch -m old_branch new_branch` 本地分支重命名
    * `git branch --set-upstream-to=origin/<远程分支> <本地分支>` 设置本地分支对应的远程分支, 或者需要更改, 在项目根目录下`.git/config`, 直接修改`merge = refs/heads/<分支名称>`
  - ### 合并分支
    * `git merge branch_name` 将branch合并到当前分支
  - ### 删除分支
    * `git branch -d branch_name` 删除分支, 分支中所有文件已提交, 是个干净的工作目录, 不能再该分支下执行该命令
    * `git branch -D branch_name` 强制删除分支, 不能在该分支下执行该命令
    * `git push origin :branch_name` 删除远程分支(即推送一个空分支到主机)

## 贮藏工作进度
  *  `git cherry-pick commit_id` 用于把另一个本地分支的commit修改应用到当前分支
  * `git stash` 保存当前的工作进度. 会分别对`working tree` 和 `index` 的状态进行保存
  * `git stash save "message" ` 指定保存信息
  * `git stash list` 显示暂存列表
  * `git stash pop` 恢复最新保存的工作进度, 并从贮藏表中删除
  * `git stash apply` 回复最新保存的工作进度,  **不** 从贮藏表中删除
  * `git stash ( pop | apply ) stash@{1}` 恢复指定的贮藏
  * `git stash clear` 清空贮藏表

## 使用技巧
  - ### 用另一分支"source_branch"的指定文件直接覆盖当前分支的相应文件
```
git checkout B_branch
cd path/to/f.txt
git checkout A_bracn  f.txt
```

  - ### 把当前修改的内容保存到暂缓区
 ```
git add .
git stash save "添加一些注释在这里
git stash list # 查看暂缓区中的内容列表     git stash pop stash@{1}  # 出栈
git stash apply stash@{1} # 应用
```
  - ### 放弃对某一个文件的修改内容
```
git checkout file_name
```

  - ### 放弃当前所有内容的修改
```
git add .
git stash 
git stash drop
```

- ### 使用某个分支的文件替换某个分支的文件
```
git 使用branch_A分支的file1文件替换branch_B的file1文件
(branch_B) $ git checkout branch_A file1
```

- ### 移除git
```
rm -rf .git
```

- ### 查看 hosts 文件
```
cat /etc/hosts
```

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/


