<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-01T11:00:00+08:00</updated><id>http://localhost:4000/</id><title type="html">逆行云</title><subtitle>世界上有10种人, 一种是懂二进制的人, 一种是不懂二进制的人.
</subtitle><entry><title type="html">使用RunTime清空单例对象属性值</title><link href="http://localhost:4000/jekyll/update/2017/08/01/welcome-to-jekyll.html" rel="alternate" type="text/html" title="使用RunTime清空单例对象属性值" /><published>2017-08-01T10:54:31+08:00</published><updated>2017-08-01T10:54:31+08:00</updated><id>http://localhost:4000/jekyll/update/2017/08/01/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/08/01/welcome-to-jekyll.html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-36673d2ce46bbead.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;来自项目截图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;功能介绍&quot;&gt;功能介绍&lt;/h3&gt;
&lt;p&gt;最近在做【电站接入】功能, 这个功能分为五个步骤前四个步骤分别让用户录入信息, 但是提交数据在最后一步执行.&lt;/p&gt;

&lt;h3 id=&quot;功能实现&quot;&gt;功能实现&lt;/h3&gt;
&lt;p&gt;新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;模型, 使用单例模式设计; 把用户输入的信息都记录在该&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;中, 提交数据时, 只需要利用&lt;code class=&quot;highlighter-rouge&quot;&gt;MJExtension&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mj_keyValues&lt;/code&gt; 方法把模型转成字典, 提交给后台即可.&lt;/p&gt;

&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;
&lt;p&gt;当退出【电站接入】流程时, 因为模型为单例, 所以模型数据一直存在, 再次进入该流程时, 会把之前用户录入的信息重新填充到表单中. 项目需求是, 退出流程再次进入时应该是一个新的流程, 不用保存上次录入的信息.&lt;/p&gt;

&lt;h3 id=&quot;问题分析&quot;&gt;问题分析&lt;/h3&gt;
&lt;p&gt;因为模型数据为单例, 存在于整个应用程序的生命周期; 如果手动把单例对象置空, 则此次应用程序生命周期期间, 不会再重新创建该模型数据对象. 因此只能对模型对象的属性值置空.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 清空属性值
 */
- (void)clearPropertyValue {
    self.latitude = nil;
    self.longitude = nil;
    self.moble_tel = nil;
    self.moble_tel_bak = nil;

    .....
    ...........此处略去20行.......
    .....

    self.org_index_code = nil;
    self.ps_id = nil;
    self.ps_location = nil;
    self.ps_name = nil;
    self.ps_type = nil;
    self.timezone = nil;
    self.time_zone_id = nil;
    self.ps_type_name = nil;
    self.safe_start_date = nil;
    self.set_user_org = nil;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果对每个属性都单独置空, 扩展性很差, 每次增加一个属性, 都需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;clearPropertyValue&lt;/code&gt;中加入一行代码, 而且不利于后期维护.&lt;/p&gt;

&lt;h3 id=&quot;优化解决方案&quot;&gt;优化解决方案&lt;/h3&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RunTime&lt;/code&gt;获取到该类的所有属性名称, 然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;KVC&lt;/code&gt; 对属性进行置空&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 清空属性值
 */
- (void)clearPropertyValue {
    // 置空自身的属性值
    unsigned int pro_count = 0;
    objc_property_t *properties = class_copyPropertyList([self class], &amp;amp;pro_count);
    for (int i = 0; i &amp;lt; pro_count; i ++) {
        objc_property_t property = properties[i];
        NSString *propertyName = [NSString stringWithFormat:@&quot;%s&quot;, property_getName(property)];
        [self setValue:nil forKey:propertyName];
    }
    free(properties);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为在我们项目中该模型使用了继承, 因此还需要清空父类的属性值&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 清空属性值
 */
- (void)clearPropertyValue {
    // 置空自身的属性值
    unsigned int pro_count = 0;
    objc_property_t *properties = class_copyPropertyList([self class], &amp;amp;pro_count);
    for (int i = 0; i &amp;lt; pro_count; i ++) {
        objc_property_t property = properties[i];
        NSString *propertyName = [NSString stringWithFormat:@&quot;%s&quot;, property_getName(property)];
        [self setValue:nil forKey:propertyName];
    }
    free(properties);
    
    // 置空父类(PowerStationForHouseholdModel)的属性值
    pro_count = 0;
    objc_property_t *properties_super = class_copyPropertyList([self superclass], &amp;amp;pro_count);
    for (int i = 0; i &amp;lt; pro_count; i ++) {
        objc_property_t property = properties_super[i];
        NSString *propertyName = [NSString stringWithFormat:@&quot;%s&quot;, property_getName(property)];
        [self setValue:nil forKey:propertyName];
    }
    free(properties_super);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;需要注意的地方&quot;&gt;需要注意的地方&lt;/h3&gt;
&lt;p&gt;由于模型中有些属性声明的是&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;KVC&lt;/code&gt;时会导致找不到对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;,发生crash. 因此还需要重写&lt;code class=&quot;highlighter-rouge&quot;&gt;setValue: forUndefinedKey:&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)setValue:(id)value forUndefinedKey:(NSString *)key {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;补充&quot;&gt;补充&lt;/h3&gt;
&lt;p&gt;获取使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RunTime&lt;/code&gt;获取成员变量&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned int count = 0;
    Ivar *ivars = class_copyIvarList([self class], &amp;amp;count);
    for (int i = 0; i &amp;lt; count; i ++) {
        Ivar ivar = *(ivars + i);
        NSLog(@&quot;成员变量&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;(%s)&quot;, ivar_getName(ivar));
    }
    free(ivars);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">逆行云的blog</title><link href="http://localhost:4000/jekyll/update/2017/08/01/welcome-to-jekyll1.html" rel="alternate" type="text/html" title="逆行云的blog" /><published>2017-08-01T10:17:31+08:00</published><updated>2017-08-01T10:17:31+08:00</updated><id>http://localhost:4000/jekyll/update/2017/08/01/welcome-to-jekyll1</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/08/01/welcome-to-jekyll1.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>