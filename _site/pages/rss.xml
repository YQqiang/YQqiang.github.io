<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>逆行云的技术博客</title>
    <link>http://localhost:4000</link>
    <description>世界上有10种人, 一种是懂二进制的人, 一种是不懂二进制的人.</description>
    
      <item>
        <title>@strongify(self) 和 @weakify(self) 宏</title>
        <link>http://localhost:4000/2017/08/30/@strongify(self)-%E5%92%8C-@weakify(self)-%E5%AE%8F.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/30/@strongify(self)-%E5%92%8C-@weakify(self)-%E5%AE%8F.html</guid>
        <pubDate>Wed, 30 Aug 2017 18:45:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-7141a1d895155e41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;宏展开&quot;&gt;宏展开&lt;/h3&gt;
&lt;p&gt;首先看一下宏展开的样子&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;strongify(self) = autoreleasepool {} &lt;em&gt;Pragma(“clang diagnostic push”) _Pragma(“clang diagnostic ignored &quot;-Wshadow&quot;”) &lt;strong&gt;attribute&lt;/strong&gt;((objc_ownership(strong))) &lt;strong&gt;typeof&lt;/strong&gt;(self) self = self_weak&lt;/em&gt;; _Pragma(“clang diagnostic pop”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;weakify(self) = autoreleasepool {} &lt;strong&gt;attribute&lt;/strong&gt;((objc_ownership(weak))) &lt;strong&gt;typeof&lt;/strong&gt;(self) self_weak_ = (self);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;如何打印宏展开内容&quot;&gt;如何打印宏展开内容&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;宏定义中包含两个运算符: # 和 ##&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;# 运算符将一个宏的参数转换为字符串字面量, 即在对它所引用的宏变量通过替换后在其左右各加上一个双引号;&lt;/li&gt;
  &lt;li&gt;## 被称为 连接符, 它是一种预处理运算符, 用来把两个语言符号组合成单个语言符号.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;打印宏展开内容时, 使用到了&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;运算符&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;定义展开宏内容的宏&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define CONNECT(x)         @#x
#define INPUT(x)           CONNECT(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INPUT(x) &lt;/code&gt; 通过传入一个宏, 即可返回该宏展开后的内容字符串.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;问题: 为何不能直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;#define INPUT(x)           @#x&lt;/code&gt;, 必须要使用宏嵌套;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;首先，C语言的宏是允许嵌套的，其嵌套后，一般的展开规律像函数的参数一样：先展开参数，再分析函数，即由内向外展开。但是，注意：
(1) 当宏中有#运算符时，参数不再被展开；
(2) 当宏中有##运算符时，则先展开函数，再展开里面的参数；
&lt;a href=&quot;http://blog.csdn.net/delphiwcdj/article/details/7040247&quot;&gt;关于嵌套宏的使用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;打印宏展开后的内容&quot;&gt;打印宏展开后的内容&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    NSString *strongify = INPUT(strongify(self));
    NSLog(@&quot;strongify(self) = %@&quot;, strongify);
    
    NSString *weakify = INPUT(weakify(self));
    NSLog(@&quot;weakify(self) = %@&quot;, weakify);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strongify(self) = autoreleasepool {} _Pragma(&quot;clang diagnostic push&quot;) _Pragma(&quot;clang diagnostic ignored \&quot;-Wshadow\&quot;&quot;) __attribute__((objc_ownership(strong))) __typeof__(self) self = self_weak_; _Pragma(&quot;clang diagnostic pop&quot;)

weakify(self) = autoreleasepool {} __attribute__((objc_ownership(weak))) __typeof__(self) self_weak_ = (self);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;浅析strongifyself-和-weakifyself&quot;&gt;浅析strongify(self) 和 weakify(self)&lt;/h2&gt;
&lt;p&gt;浅析:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;weakify(self) = autoreleasepool {} &lt;strong&gt;attribute&lt;/strong&gt;((objc_ownership(weak))) &lt;strong&gt;typeof&lt;/strong&gt;(self) self_weak_ = (self);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@autoreleasepool {} __weak __typeof__(self) self_weak = self;&lt;/code&gt; 转换后的弱引用self前增加一个自动释放池.&lt;/p&gt;

&lt;p&gt;打印&lt;code class=&quot;highlighter-rouge&quot;&gt;#define YQWeakSelf  autoreleasepool {} __weak __typeof__(self) self_weak = self;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;结果为:yqWeakSelf(self) = autoreleasepool {} &lt;strong&gt;attribute&lt;/strong&gt;((objc_ownership(weak))) &lt;strong&gt;typeof&lt;/strong&gt;(self) self_weak = self;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是不是已经很接近&lt;code class=&quot;highlighter-rouge&quot;&gt;weakify(self)&lt;/code&gt;了😄&lt;/p&gt;

&lt;p&gt;同理可以打印&lt;code class=&quot;highlighter-rouge&quot;&gt;#define YQWeakSelf  autoreleasepool {} __weak __typeof__(self) self_weak = self;&lt;/code&gt;
只不过缺少一个自动释放池和强制忽略警告代码&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>UserInfo={NSDebugDescription=Garbage at end.}解决方案</title>
        <link>http://localhost:4000/2017/08/17/UserInfo=-NSDebugDescription=Garbage-at-end.-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/17/UserInfo=-NSDebugDescription=Garbage-at-end.-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</guid>
        <pubDate>Thu, 17 Aug 2017 17:41:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-0994ca16d7c693b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用-nsjsonserialization-将字符串转字典&quot;&gt;使用 &lt;em&gt;NSJSONSerialization&lt;/em&gt; 将字符串转字典&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;步骤一: 将字符串使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSUTF8StringEncoding&lt;/code&gt;编码格式转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;NSData &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;步骤二: 将&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSJSONSerialization &lt;/code&gt;转换为对象&lt;/li&gt;
  &lt;li&gt;步骤三: 把对象为&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSData *jsonData = [result dataUsingEncoding:NSUTF8StringEncoding];
NSError *error = nil;
id  dicData = [NSJSONSerialization JSONObjectWithData:jsonData
                                              options:kNilOptions
                                                error:&amp;amp;error];
if ([dicData isKindOfClass:[NSDictionary class]]) {
    NSDictionary *dict = (NSDictionary *)dicData;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ps:  代码中&lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; 为以下字符串&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scannum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SG-A1408190013&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C8:93:46:11:0C:7F&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OPEN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MikroTik-D539F7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4C:5E:0C:D5:39:F7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OPEN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;254118&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4C:5E:0C:D6:F8:61&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WPA2_PSK_AES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;china-unicom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;00:36:76:1A:BE:27&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WPA2_PSK_AES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Derek-Phone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;F4:5C:89:C3:2D:29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WPA2_PSK_AES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sungrow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;00:8E:F2:FF:CA:60&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WPA2_PSK_AES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sungrow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;00:8E:F2:FF:C6:80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WPA2_PSK_AES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sungrow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;bssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;00:8E:F2:FF:C8:A0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WPA2_PSK_AES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rssi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;转换结果报错, 错误如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error Domain=NSCocoaErrorDomain Code=3840 &quot;Garbage at end.&quot; UserInfo={NSDebugDescription=Garbage at end.}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;问题分析&quot;&gt;问题分析&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;使用json格式化工具验证json是否合格
json正确, 如下图所示&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-b0269aa4374a0c2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;验证json合格&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;既然是合法的json, 为什么转换会出错?
通过查看data数据, 发现了问题所在.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;7b227363 616e6e75 6d223a36 2c226c69 7374223a 5b7b2273 73696422 
3a225347 2d413134 30383139 30303133 222c2262 73736964 223a2243 
383a3933 3a34363a 31313a30 433a3746 222c2261 75746822 3a224f50 
454e222c 22636861 6e6e656c 223a312c 22727373 69223a2d 31347d2c 
7b227373 6964223a 224d696b 726f5469 6b2d4435 33394637 222c2262 
73736964 223a2234 433a3545 3a30433a 44353a33 393a4637 222c2261 
75746822 3a224f50 454e222c 22636861 6e6e656c 223a312c 22727373 
69223a2d 33307d2c 7b227373 6964223a 22323534 31313822 2c226273 
73696422 3a223443 3a35453a 30433a44 363a4638 3a363122 2c226175 
7468223a 22575041 325f5053 4b5f4145 53222c22 6368616e 6e656c22 
3a332c22 72737369 223a2d34 327d2c7b 22737369 64223a22 44657265 
6b2d5068 6f6e6522 2c226273 73696422 3a224634 3a35433a 38393a43
 333a3244 3a323922 2c226175 7468223a 22575041 325f5053 4b5f4145 
53222c22 6368616e 6e656c22 3a362c22 72737369 223a2d34 387d2c7b 
22737369 64223a22 6368696e 612d756e 69636f6d 222c2262 73736964 
223a2230 303a3336 3a37363a 31413a42 453a3237 222c2261 75746822 
3a225750 41325f50 534b5f41 4553222c 22636861 6e6e656c 223a362c 
22727373 69223a2d 35307d2c 7b227373 6964223a 2273756e 67726f77 
222c2262 73736964 223a2230 303a3845 3a46323a 46463a43 413a3630 
222c2261 75746822 3a225750 41325f50 534b5f41 4553222c 22636861 
6e6e656c 223a3131 2c227273 7369223a 2d36347d 00&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;data 最后以00 结尾, 尝试删除最后一位,查看结果正常;
分析原因可能是转换data的字符串中含有不可见的非法字符&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;解决&quot;&gt;解决&lt;/h3&gt;
&lt;p&gt;过滤字符串中的非法字符
&lt;a href=&quot;https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6/6913704?fr=aladdin&quot;&gt;控制字符&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 去掉首尾的空白字符
result = [result stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
// 去除掉控制字符
result = [result stringByTrimmingCharactersInSet:[NSCharacterSet controlCharacterSet]];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;完整的步骤为&quot;&gt;完整的步骤为&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 去掉首尾的空白字符
result = [result stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
// 去除掉控制字符
result = [result stringByTrimmingCharactersInSet:[NSCharacterSet controlCharacterSet]];

NSData *jsonData = [result dataUsingEncoding:NSUTF8StringEncoding];
NSError *error = nil;
id  dicData = [NSJSONSerialization JSONObjectWithData:jsonData
                                              options:kNilOptions
                                                error:&amp;amp;error];
if ([dicData isKindOfClass:[NSDictionary class]]) {
    NSDictionary *dict = (NSDictionary *)dicData;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
      </item>
    
      <item>
        <title>使用RunTime清空单例对象属性值</title>
        <link>http://localhost:4000/2017/07/29/%E4%BD%BF%E7%94%A8RunTime%E6%B8%85%E7%A9%BA%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/29/%E4%BD%BF%E7%94%A8RunTime%E6%B8%85%E7%A9%BA%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC.html</guid>
        <pubDate>Sat, 29 Jul 2017 10:54:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-36673d2ce46bbead.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;来自项目截图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;功能介绍&quot;&gt;功能介绍&lt;/h3&gt;
&lt;p&gt;最近在做【电站接入】功能, 这个功能分为五个步骤前四个步骤分别让用户录入信息, 但是提交数据在最后一步执行.&lt;/p&gt;

&lt;h3 id=&quot;功能实现&quot;&gt;功能实现&lt;/h3&gt;
&lt;p&gt;新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;模型, 使用单例模式设计; 把用户输入的信息都记录在该&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;中, 提交数据时, 只需要利用&lt;code class=&quot;highlighter-rouge&quot;&gt;MJExtension&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mj_keyValues&lt;/code&gt; 方法把模型转成字典, 提交给后台即可.&lt;/p&gt;

&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;
&lt;p&gt;当退出【电站接入】流程时, 因为模型为单例, 所以模型数据一直存在, 再次进入该流程时, 会把之前用户录入的信息重新填充到表单中. 项目需求是, 退出流程再次进入时应该是一个新的流程, 不用保存上次录入的信息.&lt;/p&gt;

&lt;h3 id=&quot;问题分析&quot;&gt;问题分析&lt;/h3&gt;
&lt;p&gt;因为模型数据为单例, 存在于整个应用程序的生命周期; 如果手动把单例对象置空, 则此次应用程序生命周期期间, 不会再重新创建该模型数据对象. 因此只能对模型对象的属性值置空.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 清空属性值
 */
- (void)clearPropertyValue {
    self.latitude = nil;
    self.longitude = nil;
    self.moble_tel = nil;
    self.moble_tel_bak = nil;

    .....
    ...........此处略去20行.......
    .....

    self.org_index_code = nil;
    self.ps_id = nil;
    self.ps_location = nil;
    self.ps_name = nil;
    self.ps_type = nil;
    self.timezone = nil;
    self.time_zone_id = nil;
    self.ps_type_name = nil;
    self.safe_start_date = nil;
    self.set_user_org = nil;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果对每个属性都单独置空, 扩展性很差, 每次增加一个属性, 都需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;clearPropertyValue&lt;/code&gt;中加入一行代码, 而且不利于后期维护.&lt;/p&gt;

&lt;h3 id=&quot;优化解决方案&quot;&gt;优化解决方案&lt;/h3&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RunTime&lt;/code&gt;获取到该类的所有属性名称, 然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;KVC&lt;/code&gt; 对属性进行置空&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 清空属性值
 */
- (void)clearPropertyValue {
    // 置空自身的属性值
    unsigned int pro_count = 0;
    objc_property_t *properties = class_copyPropertyList([self class], &amp;amp;pro_count);
    for (int i = 0; i &amp;lt; pro_count; i ++) {
        objc_property_t property = properties[i];
        NSString *propertyName = [NSString stringWithFormat:@&quot;%s&quot;, property_getName(property)];
        [self setValue:nil forKey:propertyName];
    }
    free(properties);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为在我们项目中该模型使用了继承, 因此还需要清空父类的属性值&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 清空属性值
 */
- (void)clearPropertyValue {
    // 置空自身的属性值
    unsigned int pro_count = 0;
    objc_property_t *properties = class_copyPropertyList([self class], &amp;amp;pro_count);
    for (int i = 0; i &amp;lt; pro_count; i ++) {
        objc_property_t property = properties[i];
        NSString *propertyName = [NSString stringWithFormat:@&quot;%s&quot;, property_getName(property)];
        [self setValue:nil forKey:propertyName];
    }
    free(properties);
    
    // 置空父类(PowerStationForHouseholdModel)的属性值
    pro_count = 0;
    objc_property_t *properties_super = class_copyPropertyList([self superclass], &amp;amp;pro_count);
    for (int i = 0; i &amp;lt; pro_count; i ++) {
        objc_property_t property = properties_super[i];
        NSString *propertyName = [NSString stringWithFormat:@&quot;%s&quot;, property_getName(property)];
        [self setValue:nil forKey:propertyName];
    }
    free(properties_super);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;需要注意的地方&quot;&gt;需要注意的地方&lt;/h3&gt;
&lt;p&gt;由于模型中有些属性声明的是&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;KVC&lt;/code&gt;时会导致找不到对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;,发生crash. 因此还需要重写&lt;code class=&quot;highlighter-rouge&quot;&gt;setValue: forUndefinedKey:&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)setValue:(id)value forUndefinedKey:(NSString *)key {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;补充&quot;&gt;补充&lt;/h3&gt;
&lt;p&gt;获取使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RunTime&lt;/code&gt;获取成员变量&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned int count = 0;
    Ivar *ivars = class_copyIvarList([self class], &amp;amp;count);
    for (int i = 0; i &amp;lt; count; i ++) {
        Ivar ivar = *(ivars + i);
        NSLog(@&quot;成员变量&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;(%s)&quot;, ivar_getName(ivar));
    }
    free(ivars);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
      </item>
    
      <item>
        <title>UIBezierPath + CAShapeLayer 实战应用</title>
        <link>http://localhost:4000/2017/07/12/UIBezierPath-+-CAShapeLayer-%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/12/UIBezierPath-+-CAShapeLayer-%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8.html</guid>
        <pubDate>Wed, 12 Jul 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-e19704ddc2fece86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;时效截图&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;2017724更新&quot;&gt;2017.7.24更新&lt;/h1&gt;
&lt;h4 id=&quot;1-虚线方法多次调用会重复绘制&quot;&gt;1. 虚线方法多次调用会重复绘制&lt;/h4&gt;
&lt;p&gt;解决办法: 使用runtime给类目增加一个属性数组保存绘制的虚线; 在绘制之前移除上一个虚线&lt;code class=&quot;highlighter-rouge&quot;&gt;layer&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)addLineOfDashWithRect:(CGRect)rect lineHeight: (CGFloat)lineHeight lineWidth:(CGFloat)lineWidth lineSpacing:(CGFloat)lineSpacing lineColor:(UIColor *)lineColor lineDirection:(BOOL)isHorizonal {
    if (![self lineOfDashArray]) {
        [self setLineOfDashArray:[NSMutableArray array]];
    }
    NSMutableArray *lineOfDashs = [self lineOfDashArray];
    [lineOfDashs enumerateObjectsUsingBlock:^(CALayer *obj, NSUInteger idx, BOOL * _Nonnull stop) {
        [obj removeFromSuperlayer];
    }];
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    [shapeLayer setBounds:self.bounds];
    [shapeLayer setPosition:CGPointMake(CGRectGetWidth(self.frame) * 0.5 + CGRectGetMinX(rect), CGRectGetHeight(self.frame) * 0.5 + CGRectGetMinY(rect))];
    [shapeLayer setFillColor:[UIColor clearColor].CGColor];
    //  设置虚线颜色为blackColor
    [shapeLayer setStrokeColor:lineColor.CGColor];
    //  设置虚线高度
    [shapeLayer setLineWidth:lineHeight];
    [shapeLayer setLineJoin:kCALineJoinRound];
    //  设置线宽，线间距
    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:lineWidth], [NSNumber numberWithInt:lineSpacing], nil]];
    //  设置路径
    CGMutablePathRef path = CGPathCreateMutable();
    CGPathMoveToPoint(path, NULL, 0, 0);
    
    if (isHorizonal) {
        CGPathAddLineToPoint(path, NULL,CGRectGetWidth(rect), 0);
    } else {
        CGPathAddLineToPoint(path, NULL, 0, CGRectGetHeight(rect));
    }
    [shapeLayer setPath:path];
    [lineOfDashs addObject:shapeLayer];
    CGPathRelease(path);
    //  把绘制好的虚线添加上来
    [self.layer addSublayer:shapeLayer];
}

- (void)setLineOfDashArray:(NSMutableArray *)lineOfDashArray {
    objc_setAssociatedObject(self, &amp;amp;LineOfDashArrayKey, lineOfDashArray, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (NSMutableArray *)lineOfDashArray {
    return objc_getAssociatedObject(self, &amp;amp;LineOfDashArrayKey);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-给顶部进度视图完成的部分扩展点击事件以及增加选中已完成部分的标识&quot;&gt;2. 给顶部进度视图完成的部分扩展点击事件以及增加选中已完成部分的标识&lt;/h4&gt;
&lt;h6 id=&quot;代码地址&quot;&gt;&lt;a href=&quot;https://github.com/YQqiang/ProgressTopBar&quot;&gt;代码地址&lt;/a&gt;&lt;/h6&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;测试阶段完成, 后面进入新功能的迭代;
[电站接入]功能的重新设计, 部分效果如上图所示.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;经过对效果图的分析, 决定先把能够复用的部分封装起来&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;顶部代表当前进度的视图, 使用贝塞尔曲线绘制&lt;/li&gt;
  &lt;li&gt;视图左右两边的圆弧也使用贝塞尔曲线绘制, 并封装成类目方法&lt;/li&gt;
  &lt;li&gt;绘制虚线&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-075e95e59f4e1d55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;任务1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-34a7a85cecb3828b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;任务2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-480f86074b2df2e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;任务3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;代码实现&quot;&gt;代码实现&lt;/h2&gt;
&lt;h4 id=&quot;1顶部代表进度的视图&quot;&gt;1.顶部代表进度的视图&lt;/h4&gt;
&lt;p&gt;1.1 视图分解
顶部视图可以看成是由5个item组成, 只需要绘制出一个item, 然后再基于该item进行二次封装即可
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-16ffffa409dcf65a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;分解顶部视图&quot; /&gt;
1.2 绘制单个item
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-dd1f37a3da101fd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;分解单个item&quot; /&gt;
绘制思路: 
① :    使用贝塞尔曲线绘制部分圆弧;
②③ :使用二次贝塞尔曲线绘制圆弧
④ :    使用贝塞尔曲线路径绘制对勾
⑤ :   使用CAGradientLayer实现颜色渐变
绘制代码如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)createUI {
    self.backgroundColor = [UIColor whiteColor];
    CGFloat space = 4;
    CGFloat lineHeight = 3;
    CGFloat width = CGRectGetWidth(self.frame);
    CGFloat radius = (width - 2 * space) * 0.16;
    CGFloat controlPointY = 3.3;
    CGFloat startAngle = M_PI * 0.2;
    CGFloat endAngle = M_PI - startAngle;
    
    UIColor *doneColor = RGB(0, 158, 238);
    UIColor *doingColor = RGB(247, 141, 97);
    //    UIColor *lightDoneColor = RGB(105, 153, 171);
    UIColor *lightDoingColor = RGB(184, 147, 127);
    UIColor *unDoColor = RGB(212, 213, 214);
    
    UIColor *overalColor = doneColor;
    UIColor *leadingGradientColor = nil;
    UIColor *trailingGradientColor = nil;
    
    switch (self.processState) {
        case UnProcessState:
            overalColor = unDoColor;
            break;
        case UnProcessRightRornerRadiusState:
            overalColor = unDoColor;
            break;
        case ProcessingLeading:
            overalColor = doingColor;
            leadingGradientColor = doingColor;
            trailingGradientColor = unDoColor;
            break;
        case ProcessingMiddle:
            overalColor = doingColor;
            leadingGradientColor = lightDoingColor;
            trailingGradientColor = unDoColor;
            break;
        case ProcessingTrialing:
            overalColor = doingColor;
            break;
        case ProcessFirtDone:
            overalColor = doneColor;
            trailingGradientColor = lightDoingColor;
            break;
        case ProcessedLeading:
            overalColor = doneColor;
            break;
        case ProcessedMiddle:
            overalColor = doneColor;
            break;
        case ProcessedTrialing:
            overalColor = doneColor;
            trailingGradientColor = lightDoingColor;
            break;
        case ProcessFirtDoing:
            overalColor = doingColor;
            trailingGradientColor = unDoColor;
            break;
        case ProcessLastDone:
            overalColor = doingColor;
            leadingGradientColor = lightDoingColor;
            break;
        default:
            break;
    }
    // 路径
    UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(width * 0.5, lineHeight) radius: radius startAngle:startAngle endAngle:endAngle clockwise:YES];
    [path addQuadCurveToPoint:CGPointMake((width - 2 * space) * 0.185 + space, lineHeight) controlPoint:CGPointMake(width * 0.3, controlPointY)];
    // 左圆角
    if (self.processState == ProcessFirtDoing || self.processState == ProcessedLeading || self.processState == ProcessFirtDone) {
        [path addLineToPoint:CGPointMake(space, lineHeight)];
        [path addQuadCurveToPoint:CGPointMake(space, 0) controlPoint:CGPointMake(0 - space, lineHeight * 0.5)];
    } else {
        [path addLineToPoint:CGPointMake(0, lineHeight)];
        [path addLineToPoint:CGPointMake(0, 0)];
    }
    // 右圆角
    if (self.processState == ProcessLastDone || self.processState == UnProcessRightRornerRadiusState) {
        [path addLineToPoint:CGPointMake(width - space, 0)];
        [path addQuadCurveToPoint:CGPointMake(width - space, lineHeight) controlPoint:CGPointMake(width + space, lineHeight * 0.5)];
    } else {
        [path addLineToPoint:CGPointMake(width - 0, 0)];
        [path addLineToPoint:CGPointMake(width - 0, lineHeight)];
    }
    [path addLineToPoint:CGPointMake( width - (width - 2 * space) * 0.185 - space, lineHeight)];
    double endX = cos(startAngle) * radius + (width * 0.5);
    double endY = sin(startAngle) * radius + lineHeight;
    [path addQuadCurveToPoint:CGPointMake(endX, endY) controlPoint:CGPointMake(width * 0.7, controlPointY)];
//    path.lineWidth = 10;
    // 绘制路径图层
    CAShapeLayer *backLayer = [CAShapeLayer layer];
    backLayer.frame = self.bounds;
    backLayer.fillColor =  overalColor.CGColor;
    backLayer.strokeColor  = overalColor.CGColor;
//    backLayer.lineWidth = 2;
    backLayer.lineCap = @&quot;round&quot;;
    backLayer.lineJoin = @&quot;round&quot;;
    backLayer.path = [path CGPath];
//    backLayer.strokeEnd = 5;
    [self.layer addSublayer:backLayer];
    
    // 颜色渐变
    CAGradientLayer *gradientLayer =  [CAGradientLayer layer];
    gradientLayer.frame = self.bounds;
    NSMutableArray *colors = [NSMutableArray array];
    [colors addObject:(id)overalColor.CGColor];
    if (trailingGradientColor) {
        [colors addObject:(id)trailingGradientColor.CGColor];
    } else {
        [colors addObject:(id)overalColor.CGColor];
    }
    if (leadingGradientColor) {
        [colors insertObject:(id)leadingGradientColor.CGColor atIndex:0];
    }
    
    [gradientLayer setColors:colors];
    gradientLayer.startPoint = CGPointMake(0, 0);
    gradientLayer.endPoint = CGPointMake(1, 0);
    if (colors.count == 2) {
        gradientLayer.locations = @[@0.7];
    } else if (colors.count == 3) {
        gradientLayer.locations = @[@0, @0.5];
    }
    [self.layer addSublayer:gradientLayer];
    [gradientLayer setMask:backLayer];
    
    // 黄色圆圈(标识正在处理)
    if (self.processState == ProcessingTrialing || self.processState == ProcessingMiddle || self.processState == ProcessingLeading || self.processState == ProcessLastDone || self.processState == ProcessFirtDoing) {
        CGFloat cycleRadius = 3;
        UIView *cycleView = [[UIView alloc] init];
        cycleView.backgroundColor = RGB(247, 141, 97);
        [self addSubview:cycleView];
        cycleView.frame = CGRectMake(width * 0.5 - cycleRadius, lineHeight + radius + cycleRadius, cycleRadius * 2, cycleRadius * 2);
        cycleView.layer.cornerRadius = cycleRadius;
    }
    
    self.titleBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    self.titleBtn.titleLabel.font = [UIFont systemFontOfSize:8];
    [self addSubview:self.titleBtn];
    [self.titleBtn sizeToFit];
    CGPoint titleBtnCenter = self.titleBtn.center;
    titleBtnCenter.x = self.center.x - 5;
    titleBtnCenter.y = lineHeight + 5;
    self.titleBtn.center = CGPointMake(width * 0.5, lineHeight + 3);
    if (self.processState == ProcessedLeading || self.processState == ProcessedMiddle || self.processState == ProcessedTrialing || self.processState == ProcessLastDone) {
        // 已完成的步骤显示√
        UIBezierPath *gouPath = [UIBezierPath bezierPath];
        [gouPath moveToPoint:CGPointMake(12, CGRectGetHeight(self.titleBtn.frame) * 0.5 + 0)];
        [gouPath addLineToPoint:CGPointMake(CGRectGetWidth(self.titleBtn.frame) * 0.5, CGRectGetHeight(self.titleBtn.frame) - 8)];
        [gouPath addLineToPoint:CGPointMake(CGRectGetWidth(self.titleBtn.frame) - 10, 8)];
        CAShapeLayer *gouLayer = [CAShapeLayer layer];
        gouLayer.path = gouPath.CGPath;
        gouLayer.frame = self.titleBtn.bounds;
        gouLayer.lineWidth = 1.5;
        gouLayer.lineCap = @&quot;round&quot;;
        gouLayer.lineJoin = @&quot;round&quot;;
        gouLayer.fillColor = [UIColor clearColor].CGColor;
        gouLayer.strokeColor = [UIColor whiteColor].CGColor;
        [self.titleBtn.layer addSublayer:gouLayer];
        
    } else {
        [self.titleBtn setTitle:self.processValue forState:UIControlStateNormal];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;1.3 基于单个item二次封装
代码如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)creatUI {
    CGFloat itemWidth = CGRectGetWidth(self.frame) * 0.2;
    CGFloat itemHeight = CGRectGetHeight(self.frame);
    ProcessState processState = ProcessedLeading;
    for (int i = 0; i &amp;lt; 5; i ++) {
        if (i == self.progressValueType - 1) {
            processState = ProcessedTrialing;
        } else if (i &amp;lt; self.progressValueType) {
            processState = ProcessedMiddle;
        } else if (i == self.progressValueType) {
            processState = ProcessingMiddle;
        } else {
            processState = UnProcessState;
        }
        
        if (i == 0 &amp;amp;&amp;amp; self.progressValueType != ProgressTypeWith40) {
            processState = ProcessedLeading;
        }
        if (i == 0 &amp;amp;&amp;amp; self.progressValueType == ProgressTypeWith40) {
            processState = ProcessFirtDone;
        }
        if (i == 4) {
            processState = UnProcessRightRornerRadiusState;
        }
        
        if (self.progressValueType == ProgressTypeWith20 &amp;amp;&amp;amp; i == 0) {
            processState = ProcessFirtDoing;
        }
        if (self.progressValueType == ProgressTypeWith100 &amp;amp;&amp;amp; i == 4) {
            processState = ProcessLastDone;
        }
        CreatePlantProgressItme *item = [[CreatePlantProgressItme alloc] initWithFrame:CGRectMake(i * itemWidth, 0, itemWidth, itemHeight) processState:processState processValue:[NSString stringWithFormat:@&quot;%zd%%&quot;, (i + 1) * 20]];
        [self addSubview:item];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;1.4 最终效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-796cf479478aa0c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1.5 demo地址 &lt;a href=&quot;https://github.com/YQqiang/ProgressTopBar&quot;&gt;ProgressTopBar&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;2视图左右增加圆弧&quot;&gt;2.视图左右增加圆弧&lt;/h4&gt;
&lt;p&gt;2.1 直接上代码:(在UIView类目中添加该方法)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 视图View两边增加圆弧
 
 @param topMargin 距离顶部距离
 @param gapRadius 圆弧大小
 */
- (void)addGapTopMargin:(CGFloat)topMargin gapRadius:(CGFloat)gapRadius {
    UIBezierPath *path = [UIBezierPath bezierPathWithRect:self.bounds];
    UIBezierPath *path1 = [UIBezierPath bezierPath];
    CGFloat gapY = topMargin;
    [path1 moveToPoint:CGPointMake(0, gapY)];
    [path1 addQuadCurveToPoint:CGPointMake(gapRadius, gapY + gapRadius * 1.5) controlPoint:CGPointMake(0, gapY + gapRadius * 1)];
    [path1 addQuadCurveToPoint:CGPointMake(gapRadius, gapY + gapRadius * 3.5) controlPoint:CGPointMake(gapRadius * 2, gapY + gapRadius * 2.5)];
    [path1 addQuadCurveToPoint:CGPointMake(0, gapY + gapRadius * 5) controlPoint:CGPointMake(0, gapY + gapRadius * 4)];
    [path1 fill];
    
    UIBezierPath *path2 = [UIBezierPath bezierPathWithCGPath:path1.CGPath];
    [path2 applyTransform:CGAffineTransformMakeRotation(M_PI)];
    [path2 applyTransform:CGAffineTransformMakeTranslation(CGRectGetWidth(self.frame), topMargin * 2 + 5 * gapRadius)];
    [path appendPath:[path1 bezierPathByReversingPath]];
    [path appendPath:[path2 bezierPathByReversingPath]];
    
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    shapeLayer.path = path.CGPath;
    [self.layer setMask:shapeLayer];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;2.2 如何使用:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self.bgView addGapTopMargin:84 gapRadius:8];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;2.3 最终效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-28a1910f81a0e2e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;弧度为5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-bbf5fb297e36f440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;弧度为8&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-绘制虚线&quot;&gt;3. 绘制虚线&lt;/h4&gt;
&lt;p&gt;3.1 同样在UIView类目中添加该方法:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 绘制虚线
 
 @param rect 虚线尺寸
 @param lineHeight 虚线的高度
 @param lineWidth 虚线的宽度
 @param lineSpacing 虚线的间距
 @param lineColor 虚线的颜色
 @param isHorizonal 水平 | 垂直  (YES 水平; NO 垂直)
 */
- (void)addLineOfDashWithRect:(CGRect)rect lineHeight: (CGFloat)lineHeight lineWidth:(CGFloat)lineWidth lineSpacing:(CGFloat)lineSpacing lineColor:(UIColor *)lineColor lineDirection:(BOOL)isHorizonal {
    
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    [shapeLayer setBounds:self.bounds];
    [shapeLayer setPosition:CGPointMake(CGRectGetWidth(self.frame) * 0.5 + CGRectGetMinX(rect), CGRectGetHeight(self.frame) * 0.5 + CGRectGetMinY(rect))];
    [shapeLayer setFillColor:[UIColor clearColor].CGColor];
    //  设置虚线颜色为blackColor
    [shapeLayer setStrokeColor:lineColor.CGColor];
    //  设置虚线高度
    [shapeLayer setLineWidth:lineHeight];
    [shapeLayer setLineJoin:kCALineJoinRound];
    //  设置线宽，线间距
    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:lineWidth], [NSNumber numberWithInt:lineSpacing], nil]];
    //  设置路径
    CGMutablePathRef path = CGPathCreateMutable();
    CGPathMoveToPoint(path, NULL, 0, 0);
    
    if (isHorizonal) {
        CGPathAddLineToPoint(path, NULL,CGRectGetWidth(rect), 0);
    } else {
        CGPathAddLineToPoint(path, NULL, 0, CGRectGetHeight(rect));
    }
    [shapeLayer setPath:path];
    CGPathRelease(path);
    //  把绘制好的虚线添加上来
    [self.layer addSublayer:shapeLayer];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;3.2 使用方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//    [self.bgView addLineOfDashWithRect:CGRectMake(0, 150, self.bgView.bounds.size.width, 2) lineHeight:2 lineWidth:8 lineSpacing:5 lineColor:[UIColor redColor] lineDirection:YES];
    [self.bgView addLineOfDashWithRect:CGRectMake(self.bgView.bounds.size.width * 0.5, 0, 2, self.bgView.bounds.size.height) lineHeight:2 lineWidth:8 lineSpacing:5 lineColor:[UIColor redColor] lineDirection:NO];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;3.3 虚线效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-059f2bfd39c9ab6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;水平虚线&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-1460d5ee43ab9f96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;竖直虚线&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;颜色渐变&lt;code class=&quot;highlighter-rouge&quot;&gt;CAGradientLayer&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CAGradientLayer *gradientLayer =  [CAGradientLayer layer];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;贝塞尔路径的copy(由path1 复制出 path2)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIBezierPath *path2 = [UIBezierPath bezierPathWithCGPath:path1.CGPath];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;贝塞尔路径的变换操作(平移, 旋转, 缩放)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[path2 applyTransform:CGAffineTransformMakeRotation(M_PI)];
[path2 applyTransform:CGAffineTransformMakeTranslation(CGRectGetWidth(self.frame), topMargin * 2 + 5 * gapRadius)];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;裁剪贝塞尔曲线填充的部分
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[path appendPath:[path1 bezierPathByReversingPath]];
[path appendPath:[path2 bezierPathByReversingPath]];
    
 CAShapeLayer *shapeLayer = [CAShapeLayer layer];
 shapeLayer.path = path.CGPath;
 [self.layer setMask:shapeLayer];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;设置虚线
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //  设置线宽，线间距
 [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:lineWidth], [NSNumber numberWithInt:lineSpacing], nil]];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CALayer 层的动画暂停与恢复&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; /**
  暂停layer层的动画
     
  @param layer
  */
 -(void)pauseLayer:(CALayer*)layer {
     if (layer.speed == 0) return;
     CFTimeInterval pausedTime = [layer convertTime:CACurrentMediaTime() fromLayer:nil];
     layer.speed = 0.0;
     layer.timeOffset = pausedTime;
 }
 /**
  恢复layer层的动画
     
  @param layer
  */
 -(void)resumeLayer:(CALayer*)layer {
     if (layer.speed != 0) return;
     CFTimeInterval pausedTime = [layer timeOffset];
     layer.speed = 1.0;
     layer.timeOffset = 0.0;
     layer.beginTime = 0.0;
     CFTimeInterval timeSincePause = [layer convertTime:CACurrentMediaTime() fromLayer:nil] - pausedTime;
     layer.beginTime = timeSincePause;
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-c6db3cdb842391ed.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;pauseAnimation.gif&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>项目维护<<模糊搜索控件封装>></title>
        <link>http://localhost:4000/2017/06/20/%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4-%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2%E6%8E%A7%E4%BB%B6%E5%B0%81%E8%A3%85.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/20/%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4-%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2%E6%8E%A7%E4%BB%B6%E5%B0%81%E8%A3%85.html</guid>
        <pubDate>Tue, 20 Jun 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-2cbd3c688b66833c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;来自项目截图&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;接手项目中的选择控件是iOS系统风格的&lt;code class=&quot;highlighter-rouge&quot;&gt;pickView&lt;/code&gt;, 但是当数据源个数超过十几个时, &lt;code class=&quot;highlighter-rouge&quot;&gt;pickView&lt;/code&gt;用起来就不是很方便了, 需要来回滚动找到需要的那条数据.
于是就撸了一个简单的支持搜索的菜单选择控件.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;控件下载地址&lt;a href=&quot;https://github.com/YQqiang/YQFuzzySearchView&quot;&gt;YQFuzzySearchView&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo演示&quot;&gt;Demo演示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-b503f4d6a82e6352.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;模糊搜索演示.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何使用&quot;&gt;如何使用&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SearchTableView *searchTableView = [[SearchTableView alloc] initWithTitle:@&quot;测试搜索标题&quot; dataSource:arr currentSelectIndex:self.selectIndex];
[searchTableView setSelectResultBlock:^(NSInteger index){
}];
[self presentViewController:searchTableView animated:YES completion:nil];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;初始化&lt;code class=&quot;highlighter-rouge&quot;&gt;SearchTableView&lt;/code&gt;时, 可以传入标题, 数据源, 当前选中的下标等参数.&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;selectResultBlock&lt;/code&gt;获取选中的下标&lt;/li&gt;
  &lt;li&gt;控件显示使用的是控制器+转场动画的方式,因此只需要&lt;code class=&quot;highlighter-rouge&quot;&gt;presentViewController&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)textFieldShouldChange:(UITextField *)textField {
    if (textField.text.length &amp;lt;= 0) {
        self.dataSource = self.originDataSource;
    } else {
        NSPredicate *pred = [NSPredicate predicateWithFormat:@&quot;SELF CONTAINS[cd] %@&quot;,textField.text];
        self.dataSource = [self.originDataSource filteredArrayUsingPredicate:pred];
    }
    [self.tableView reloadData];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;通过监听搜索框文字内容的改变, 然后使用谓词过滤数据源, 重新刷新&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;这博客太没技术含量了, 水平太低, 写不出高深的东西, 我也很无奈啊, 哈哈哈哈哈哈哈&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-a10f79ca99b08f67.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片来源于网络, 如果侵犯了您的权利, 请联系我删除&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>项目维护<<地图相关总结>></title>
        <link>http://localhost:4000/2017/06/13/%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4-%E5%9C%B0%E5%9B%BE%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/13/%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4-%E5%9C%B0%E5%9B%BE%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93.html</guid>
        <pubDate>Tue, 13 Jun 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-e74be5476a2457b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;来自项目截图-点聚合&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;一-问题-地图标注点位置不准确&quot;&gt;一. 问题: 地图标注点位置不准确&lt;/h2&gt;
&lt;h3 id=&quot;知识背景&quot;&gt;知识背景&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;1.WGS－84原始坐标系，一般用国际GPS纪录仪记录下来的经纬度，通过GPS定位拿到的原始经纬度，Google和高德地图定位的的经纬度（国外）都是基于WGS－84坐标系的；但是在国内是不允许直接用WGS84坐标系标注的，必须经过加密后才能使用；
2.GCJ－02坐标系，又名“火星坐标系”，是我国国测局独创的坐标体系，由WGS－84加密而成，在国内，必须至少使用GCJ－02坐标系，或者使用在GCJ－02加密后再进行加密的坐标系，如百度坐标系。高德和Google在国内都是使用GCJ－02坐标系，可以说，GCJ－02是国内最广泛使用的坐标系；
3.百度坐标系:bd-09，百度坐标系是在GCJ－02坐标系的基础上再次加密偏移后形成的坐标系，只适用于百度地图。(目前百度API提供了从其它坐标系转换为百度坐标系的API，但却没有从百度坐标系转为其他坐标系的API)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上知识点来自&lt;a href=&quot;http://blog.csdn.net/a13570320979/article/details/51366355&quot;&gt;高德，百度，Google地图定位偏移以及坐标系转换&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;分析原因&quot;&gt;分析原因&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;我们项目中使用的是高德地图.创建电站时, 会把获取到的高德经纬度调用后台接口转换成GPS经纬度, 然后把高德经纬度和GPS经纬度都给后台, 后台会再把GPS转成经纬度覆盖传入的经纬度(我们的后台设计是不是很神奇😂😂, 懒得吐槽了).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;经过以上的过程, 在地图点聚合页面获取到的经纬度其实是真实的经纬度, 然而代码中却是直接当成高德坐标在地图上标注, 所以位置显示有偏差.&lt;/p&gt;

&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;
&lt;p&gt;把GPS转换为高德经纬度, 在标注点.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CLLocationCoordinate2D amapcoord = AMapCoordinateConvert(CLLocationCoordinate2DMake([mapPsModel.latitude doubleValue], [mapPsModel.longitude doubleValue]), AMapCoordinateTypeGPS);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;二-地图poi搜索&quot;&gt;二. 地图POI搜索&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;注: 在未设置城市限制时, 高德POI搜索仅会返回建议城市, 需要引导用户选择某一城市后,继续搜索.
&lt;a href=&quot;http://lbs.amap.com/api/ios-sdk/guide/map-data/poi&quot;&gt;高德官方sdk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-8b0b2a66c87d8226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;建议城市&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-72e0ac18b3a073dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;兴趣点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-30ca0462abbc018b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;标注点&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三-导航功能&quot;&gt;三. 导航功能&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;跳转到高德地图和苹果自带地图, 目标位置是准确的; 但是跳转到百度地图, 目标位置发生偏移.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;分析原因-1&quot;&gt;分析原因&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;国际经纬度坐标标准为WGS-84,国内必须至少使用国测局制定的GCJ-02,对地理位置进行首次加密。百度坐标在此基础上，进行了BD-09二次加密措施,更加保护了个人隐私。
因此从高德地图进入百度地图导航, 需要制定经纬度类型&lt;code class=&quot;highlighter-rouge&quot;&gt;coord_type=gcj02&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;解决方案-1&quot;&gt;解决方案&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;需要手动点击开始导航&lt;code class=&quot;highlighter-rouge&quot;&gt;@&quot;baidumap://map/direction?origin=&amp;amp;destination=latlng:%f,%f|name=目的地&amp;amp;mode=driving&amp;amp;coord_type=gcj02&quot;&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *urlString = [[NSString stringWithFormat:@&quot;baidumap://map/direction?origin=&amp;amp;destination=latlng:%f,%f|name=目的地&amp;amp;mode=driving&amp;amp;coord_type=gcj02&quot;,locationBaidu.coordinate.latitude, locationBaidu.coordinate.longitude] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]; 
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;直接导航 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&quot;baidumap://map/navi?location=%f, %f&amp;amp;src=push&amp;amp;type=BLK&amp;amp;src=webapp.line.isolarcloud.operation4ios&amp;amp;coord_type=gcj02&quot;&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *urlString = [[NSString stringWithFormat:@&quot;baidumap://map/navi?location=%f, %f&amp;amp;src=push&amp;amp;type=BLK&amp;amp;src=webapp.line.isolarcloud.operation4ios&amp;amp;coord_type=gcj02&quot;, locationBaidu.coordinate.latitude, locationBaidu.coordinate.longitude] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果不指定类型, 也可以手动转换坐标点, 请参考&lt;a href=&quot;https://blog.woodbunny.com/post-68.html&quot;&gt;火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;强烈推荐同事(地图方面的大神)的一篇博客,介绍的非常详细 &lt;a href=&quot;http://www.chengyong.net/tool-used/map-difference-at-home-and-abroad.html&quot;&gt;[国内外地图差异分析](http://www.chengyong.net/tool-used/map-difference-at-home-and-abroad.html)&lt;/a&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>项目维护<<导航栏标题换行显示>></title>
        <link>http://localhost:4000/2017/06/03/%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4-%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%A0%87%E9%A2%98%E6%8D%A2%E8%A1%8C%E6%98%BE%E7%A4%BA.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/03/%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4-%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%A0%87%E9%A2%98%E6%8D%A2%E8%A1%8C%E6%98%BE%E7%A4%BA.html</guid>
        <pubDate>Sat, 03 Jun 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-9aa412fdf2013211.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;在正文之前, 先允许我吐槽一下这段时间的工作. 五月份开始, 我们的项目进入V2版本, 进行TR4测试; 经过测试部的测试, 暴露了我们开发过程中的很多问题, 改bug改到晕厥😂😂😂——-不好意思, 有点浮夸了…………
由于开发之前,没有详尽的需求文档和设计, 导致了很多问题在测试阶段才暴露出来, 这样就严重影响工作计划的进度. 对于开发来说, 需求一遍遍改, 代码也要一遍遍改, 请允许我爆粗口 我日你个象拔蚌, 能不能不要轻易的改需求😭, 气到吐血&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-a242874a40e586c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片来源于网络&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;吐槽完了, 工作还是要继续的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;导航栏标题太长, 一行显示不全, 测试建议导航栏标题可以两行显示, 两行显示不全, 可以缩放字体.&lt;/p&gt;

&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;由于项目已经开发很久了, 每个页面都自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;navigationItem.titleView&lt;/code&gt;,  这个工作量, 想想就不想干😂
控制器中设置导航栏标题分为两种方式:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.navigationItem.title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.title&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps: &lt;code class=&quot;highlighter-rouge&quot;&gt;self.title&lt;/code&gt; 相当于同时设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;self.navigationItem.title&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.tabBarItem.title&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;解决&quot;&gt;解决&lt;/h2&gt;
&lt;p&gt;经过上面的分析, 想到可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationItem&lt;/code&gt;类目, 重写系统的&lt;code class=&quot;highlighter-rouge&quot;&gt;setTitle:&lt;/code&gt;方法, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;setTitle:&lt;/code&gt;方法中定义&lt;code class=&quot;highlighter-rouge&quot;&gt;titleView&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;UINavigationItem+Title.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UINavigationItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 覆盖系统的设置导航栏标题方法，自定义title为两行显示

 @param title 标题
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clearColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIFont&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;boldSystemFontOfSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adjustsFontSizeToFitWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textAlignment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSTextAlignmentCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sizeToFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;titleView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;由于&lt;code class=&quot;highlighter-rouge&quot;&gt;self.title&lt;/code&gt;方法设置导航栏的标题, 不走该方法, 因此需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;BaseViewController&lt;/code&gt;重写&lt;code class=&quot;highlighter-rouge&quot;&gt;setTitle:&lt;/code&gt;, 然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;self.navigationItem.title&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)setTitle:(NSString *)title {
    [super setTitle:title];
    self.navigationItem.title = title;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;励志以最少的代码解决看起来比较复杂问题&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>iOS YQAlert 弹出框 -- 个人库</title>
        <link>http://localhost:4000/2017/04/28/iOS-YQAlert-%E5%BC%B9%E5%87%BA%E6%A1%86-%E4%B8%AA%E4%BA%BA%E5%BA%93.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/28/iOS-YQAlert-%E5%BC%B9%E5%87%BA%E6%A1%86-%E4%B8%AA%E4%BA%BA%E5%BA%93.html</guid>
        <pubDate>Fri, 28 Apr 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-dd4e9342eab529ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近使用swift 撸了一个弹出框, 可以高度自定义弹出框的内容, 样式和动画效果, 且可以使用&lt;a href=&quot;http://www.jianshu.com/p/95df9f07b5f2&quot;&gt;同步弹出框&lt;/a&gt;, 支持&lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods&lt;/code&gt;引入&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;yqalert&quot;&gt;YQAlert&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/YQqiang/YQAlert&quot;&gt;YQAlert git地址&lt;/a&gt;, &lt;strong&gt;&lt;em&gt;支持cocoapods&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;弹出框结构&quot;&gt;弹出框结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-f394241fd22a1cd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;alertStructure.png&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;标注&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;①&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;自定义头部视图&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;②&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;标题和内容描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;③&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;自定义内容视图&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;④&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;操作按钮部分&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;本项目是使用 Swift 封装的弹出框。布局方式使用Auto Layout (VFL), 不依赖任何第三方布局框架, 方便快速集成&lt;/p&gt;

&lt;h2 id=&quot;功能&quot;&gt;功能&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;支持统一定义项目中弹出框样式, 包括控件之间的间距, 控件的外观及标题和内容的属性设置&lt;/li&gt;
  &lt;li&gt;支持完全自定义标题上方的头部视图&lt;/li&gt;
  &lt;li&gt;支持完全自定义内容文字下方的内容视图&lt;/li&gt;
  &lt;li&gt;支持按钮的水平排列或者垂直排列&lt;/li&gt;
  &lt;li&gt;可以设置为&lt;a href=&quot;http://www.jianshu.com/p/95df9f07b5f2&quot;&gt;同步弹出框&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;可以对操作按钮进行插入/删除/添加等操作&lt;/li&gt;
  &lt;li&gt;支持自定义弹出框的显示和消失的动画及动画执行时长&lt;/li&gt;
  &lt;li&gt;可设置背景虚化(毛玻璃效果)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;要求&quot;&gt;要求&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;iOS 9.0 +&lt;/li&gt;
  &lt;li&gt;Xcode 8.3&lt;/li&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;h3 id=&quot;cocoapods&quot;&gt;CocoaPods&lt;/h3&gt;

&lt;h4 id=&quot;swift3&quot;&gt;Swift3&lt;/h4&gt;
&lt;p&gt;确保使用最新版本cocoapods &lt;strong&gt;CocoaPods 1.2.1&lt;/strong&gt;, 可以使用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install cocoapods --pre&lt;/code&gt; 来升级.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ProjectName'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_frameworks!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'YQAlert'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;
&lt;p&gt;请下载Demo直接运行&lt;/p&gt;

&lt;h3 id=&quot;demo-预览&quot;&gt;Demo 预览&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/YQqiang/YQAlert/blob/master/YQAlertDemo.gif?raw=true&quot; alt=&quot;YQAlertDemo.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;代码详解&quot;&gt;代码详解&lt;/h2&gt;
&lt;h3 id=&quot;全局配置&quot;&gt;全局配置&lt;/h3&gt;
&lt;h4 id=&quot;使用yqalertconf配置整个项目中弹出框的样式&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;YQAlertConf&lt;/code&gt;配置整个项目中弹出框的样式&lt;/h4&gt;
&lt;h5 id=&quot;配置弹出框样式&quot;&gt;配置弹出框样式&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK:- 配置弹出框样式&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 弹出框的背景颜色&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 弹出框的圆角&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cornerRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 遮挡屏幕视图的背景颜色&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dimBackgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 控件之间垂直间距&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;verticalMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 水平距父视图的间距(不包含按钮之间水平间距)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;horizontalMargin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 弹出框距左边屏幕的间距&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertToLeftScreenMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 弹出框距右边屏幕的间距&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertToRightScreenMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;配置标题样式&quot;&gt;配置标题样式&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK:- 配置标题样式&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// 标题字体&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boldSystemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 标题颜色&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 标题的对齐方式&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSTextAlignment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 标题的行数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleNumberOfLines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;配置内容文字样式&quot;&gt;配置内容文字样式&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK:- 配置内容文字样式&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// 内容文字字体&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;systemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 内容文字颜色&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightGray&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 内容文字的对齐方式&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSTextAlignment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 内容文字的行数&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailNumberOfLines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;操作按钮的样式配置&lt;/p&gt;
&lt;h5 id=&quot;普通按钮&quot;&gt;普通按钮&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK:- 普通按钮&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buttonBorderWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buttonBorderColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buttonBackgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3399fe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buttonTitleFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;systemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buttonTitleColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;取消按钮&quot;&gt;取消按钮&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK:- 取消按钮 cancel&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelButtonBorderWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelButtonBorderColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelButtonBackgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3399fe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelButtonTitleFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;systemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelButtonTitleColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;警示按钮&quot;&gt;警示按钮&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK:- 警示按钮 destructive&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destructiveButtonBorderWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destructiveButtonBorderColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destructiveButtonBackgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destructiveButtonTitleFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;systemFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destructiveButtonTitleColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;特有样式配置-可以为每个弹出框设置的属性&quot;&gt;特有样式配置, 可以为每个弹出框设置的属性&lt;/h4&gt;
&lt;h5 id=&quot;外观样式相关属性配置&quot;&gt;外观样式相关属性配置&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;/// 操作按钮水平排列:点击背景, 默认弹出框 `不消失`; 操作按钮垂直排列: 点击背景, 默认弹出框 `消失`&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isTapBackgroundToDismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 是否执行同步弹出框: 默认不执行;  同步弹出框的说明&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isSyncAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 点击操作按钮之后, 弹出框是否消失? 默认消失.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isClickAlertButtonToDismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// 显示背景是否虚化处理; 默认不虚化&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;visualEffectEnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;动画相关属性配置&quot;&gt;动画相关属性配置&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// 弹出框显示动画的执行时长&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showAnimationDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 弹出框消失动画的执行时长&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dismissAnimationDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 自定义弹出框显示动画&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animationDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())?&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// 自定义弹出框消失动画&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dismissAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animationDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;操作按钮间距配置&quot;&gt;操作按钮间距配置&lt;/h5&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// 按钮距左边和右边的边距, 默认左右给为30;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buttonViewToLeftAndRightMargin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;30.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// 按钮和按钮之间的间距; 默认值为8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertButtonToButtonMargin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;基本用法&quot;&gt;基本用法&lt;/h3&gt;
&lt;h4 id=&quot;仅有标题和内容文字&quot;&gt;仅有标题和内容文字&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-864b1397dc826e6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;noneButton.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertNormalView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;标题&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;内容文字&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isTapBackgroundToDismiss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;创建一个按钮的弹出框-使用闭包获取到按钮的点击回调-默认按钮标题为确认-也可以设置标题-默认按钮类型为普通类型normal-也可以设置按钮类型&quot;&gt;创建一个按钮的弹出框, 使用闭包获取到按钮的点击回调; 默认按钮标题为&lt;code class=&quot;highlighter-rouge&quot;&gt;确认&lt;/code&gt;, 也可以设置标题; 默认按钮类型为普通类型&lt;code class=&quot;highlighter-rouge&quot;&gt;normal&lt;/code&gt;, 也可以设置按钮类型&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-9f56a8f1587e12fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;oneButton.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertNormalView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;标题&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;内容文字&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonViewToLeftAndRightMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;创建两个按钮的弹出框-使用闭包获取到按钮的点击回调-默认第一个按钮-标题为取消-按钮类型为cancel-默认第二个按钮的标题为确认-按钮类型为normal-通过闭包获取到每个按钮的点击事件-并且默认值也支持自定义&quot;&gt;创建两个按钮的弹出框, 使用闭包获取到按钮的点击回调, 默认第一个按钮, 标题为&lt;code class=&quot;highlighter-rouge&quot;&gt;取消&lt;/code&gt;, 按钮类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;cancel&lt;/code&gt;; 默认第二个按钮的标题为&lt;code class=&quot;highlighter-rouge&quot;&gt;确认&lt;/code&gt;, 按钮类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;normal&lt;/code&gt;; 通过闭包获取到每个按钮的点击事件, 并且默认值也支持自定义&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-477be019a570b2da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;twoButton.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertNormalView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;标题&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;详细内容&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonViewToLeftAndRightMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;操作按钮的增加-删除-和-插入&quot;&gt;操作按钮的增加, 删除 和 插入&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-6be950c91d86e776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;operationButton.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertNormalView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;标题&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;内容文字&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;button1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;添加按钮1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;button2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;添加按钮2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;button3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;添加按钮3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendAlertButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insertAlertButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendAlertButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAlertButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonViewToLeftAndRightMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;自定义用法-ps-自定义的视图请使用-auto-layout-布局&quot;&gt;自定义用法 (ps: 自定义的视图请使用 Auto Layout 布局)&lt;/h3&gt;
&lt;h4 id=&quot;自定义头视图&quot;&gt;自定义头视图&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-7d391959a07e01ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;customHead.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertNormalView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;标题&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;内容文字&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;customHeadView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;checkImageV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;imageLiteral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;resourceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;checkImageV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;checkImageV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUserInteractionEnabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;checkImageV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addGestureRecognizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UITapGestureRecognizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clickButton&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkImageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topHeadC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkImageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;checkImageVRightC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkImageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topHeadC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkImageVRightC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertImageV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;imageLiteral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;resourceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertImageV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertImageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertImageVTopC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertImageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertImageVBottomC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertImageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertImageVCenterX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertImageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertImageVTopC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertImageVBottomC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alertImageVCenterX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addHeadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;headView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customHeadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonViewToLeftAndRightMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;自定义内容视图&quot;&gt;自定义内容视图&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-e7efef55dcfe2498.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;customContent.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YQAlertNormalView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;标题&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;内容文字&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;customContentView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test2.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imageV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bottomC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leftC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rightC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relatedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rightC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonViewToLeftAndRightMargin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alertV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;联系我&quot;&gt;联系我：&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;博客: http://www.jianshu.com/u/b34eb8288906&lt;/li&gt;
  &lt;li&gt;邮箱: yq1054572107@gmail.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;贡献者&quot;&gt;贡献者&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/YQqiang&quot;&gt;YQqiang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欢迎提交 issue 和 PR，大门永远向所有人敞开。&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;YQAlert is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;

&lt;h2 id=&quot;git-地址&quot;&gt;Git 地址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/YQqiang/YQAlert&quot;&gt;YQAlert&lt;/a&gt; &lt;strong&gt;&lt;em&gt;支持cocoapods&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Nunchakus -- 个人APP</title>
        <link>http://localhost:4000/2017/04/19/Nunchakus-%E4%B8%AA%E4%BA%BAAPP.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/19/Nunchakus-%E4%B8%AA%E4%BA%BAAPP.html</guid>
        <pubDate>Wed, 19 Apr 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-e1bc33c34e201e2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近利用业余时间, 写了一个非常简陋的APP(Nunchakus): 该APP只有一个功能, 那就是视屏播放, 虽然功能就一个, 但是开发中坑却不少, 所以在此做下总结.&lt;/p&gt;

&lt;h1 id=&quot;nunchakus-预览及简介&quot;&gt;Nunchakus 预览及简介&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-62c5d1bbc283b0b7.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;Nunchakus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nunchakus 是一款专门播放双节棍视频的APP, Nunchakus中所有的视屏资源均来自&lt;a href=&quot;http://www.sjg8.com&quot;&gt;双节棍吧&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;技术实现&quot;&gt;技术实现&lt;/h1&gt;
&lt;h3 id=&quot;网络层的代码实现&quot;&gt;网络层的代码实现&lt;/h3&gt;
&lt;p&gt;观察网站的视屏结构可以清楚整理出网页的路径&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.sjg8.com/###/xxx&lt;/code&gt;
其中&lt;code class=&quot;highlighter-rouge&quot;&gt;###&lt;/code&gt;代表的视频的类型, &lt;code class=&quot;highlighter-rouge&quot;&gt;xxx&lt;/code&gt;代表页数.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum VideoType {
    case zipai      // 棍友自拍
    case biaoyan    // 舞台表演
    case jiaoxue    // 棍法教学
    case media      // 媒体关注
    case movie      // 影视动画
    case guowai     // 国外聚焦
    case paoku      // 极限跑酷
    case v          // 播放视屏
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;整理好网站结构可以很容易地使用&lt;code class=&quot;highlighter-rouge&quot;&gt;moya&lt;/code&gt;写出网络请求&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;, 不太会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;moya&lt;/code&gt;的同学可以参考我的这篇文章&lt;a href=&quot;http://www.jianshu.com/p/2e0dfba02ae5&quot;&gt;RxSwift + Moya + ObjectMapper + MVVM 的网络请求&lt;/a&gt;
首页虽然有七大类(&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;是用来播放视频的不作为视频类型, 但是&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;路径类似, 所以写在同一个枚举里面), 但是我们只需要实现某一类型的视频播放, 然后设置不同的类型即可.&lt;/p&gt;

&lt;h3 id=&quot;解析html&quot;&gt;解析HTML&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;的解析使用到了第三方库&lt;a href=&quot;https://github.com/tid-kijyun/Kanna&quot;&gt;Kanna&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;XPath&lt;/code&gt;语法:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;表达式&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;nodename&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;选取此节点的所有子节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;从根节点选取&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;//&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;选取当前节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;..&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;选取当前节点的父节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;@&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;选取属性&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XPath&lt;/code&gt;更多其他用法, 可以去&lt;a href=&quot;http://www.w3school.com.cn/xpath/xpath_syntax.asp&quot;&gt;w3school&lt;/a&gt;查看
至此, 可以完成解析&lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;并转成&lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt;的步骤, 接下来的开发就和常规开发模式相同了, 在次不再赘述.&lt;/p&gt;

&lt;p&gt;以下是填坑部分&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;填坑&quot;&gt;填坑&lt;/h1&gt;
&lt;h3 id=&quot;坑1----获取到优酷视频的vid-如何解析出真实的视频播放地址&quot;&gt;坑1 -  获取到优酷视频的VID, 如何解析出真实的视频播放地址&lt;/h3&gt;
&lt;p&gt;使用以下&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;代码,可以解析优酷视频地址:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(&quot;request&quot;)

var requestURL = function(window, encodeid){
    window.BuildVideoInfo = {
        encodeid:encodeid,
        _type:&quot;m3u8&quot;,
        _url:&quot;http://play.youku.com/play/get.json?vid=&quot; + encodeid + &quot;&amp;amp;ct=12&amp;amp;callback=BuildVideoInfo.response&quot;,
        _vid:encodeid,
    };
    BuildVideoInfo.response = function(a) {
        this.init(a);
    };
    BuildVideoInfo.m3u8src = function(a) {
        return YK.password = this._password, YK.m3u8src_v2(this.encodeid, a)
    };
    BuildVideoInfo.init = function(a) {
        console.log(a);
        this._v = a;
        var b = a.data, c = b.stream;
        if (this.encodeid = b.video.encodeid, !b.security ||!b.security.encrypt_string ||!b.security.ip)
//            location.href = &quot;yuqiang://encodeidfailed&quot;
            return YKP.sendErrorReport(2004), void YKP.showError(null, &quot;数据解析错误&quot;);
        if (!c&amp;amp;&amp;amp;!b.error)
//            location.href = &quot;yuqiang://encodeidfailed&quot;
            return void YKP.showError(null, &quot;该视频暂不能播放&quot;);
        var d = [19, 1, 4, 7, 30, 14, 28, 8, 24, 17, 6, 35, 34, 16, 9, 10, 13, 22, 32, 29, 31, 21, 18, 3, 2, 23, 25, 27, 11, 20, 5, 15, 12, 0, 33, 26], e = rc4(translate(YK.mk.a3 + &quot;o0b&quot; + YKP.userCache.a1, d).toString(), decode64(b.security.encrypt_string)), f = e.split(&quot;_&quot;);
        YKP.userCache.sid = e.split(&quot;_&quot;)[0];
        YKP.userCache.token = e.split(&quot;_&quot;)[1];
        YK.v = a;
        var url = YK.m3u8src_v2(BuildVideoInfo.encodeid,&quot;mp4&quot;);
        $(&quot;#media&quot;).attr(&quot;src&quot;,url);
        location.href = url
//        alert(requestCallback)
//        alert(requestCallback.callback)
//        alert(url);
        requestCallback.callback(url)
    };
    
    var YK = {}, YKU = {}, YKP = {
        playerType: &quot;&quot;,
        userCache: {
            a1: &quot;4&quot;,
            a2: &quot;1&quot;
        },
        playerState: {
            PLAYER_STATE_INIT: &quot;PLAYER_STATE_INIT&quot;,
            PLAYER_STATE_READY: &quot;PLAYER_STATE_READY&quot;,
            PLAYER_STATE_AD: &quot;PLAYER_STATE_AD&quot;,
            PLAYER_STATE_PLAYING: &quot;PLAYER_STATE_PLAYING&quot;,
            PLAYER_STATE_END: &quot;PLAYER_STATE_END&quot;,
            PLAYER_STATE_ERROR: &quot;PLAYER_STATE_ERROR&quot;
        },
        playerCurrentState: &quot;PLAYER_STATE_INIT&quot;
    };
    YK.m3u8src = function(a, b) {
        var c = &quot;http://v.youku.com/player/getM3U8/vid/&quot; + a + &quot;/type/&quot; + b + &quot;/ts/&quot; + parseInt((new Date).getTime() / 1e3);
        return  (c += &quot;/useKeyFrame/0&quot;), c += &quot;/v.m3u8&quot;
    };
    YK.m3u8src_v2 = function(a, b) {
        var c = {
            vid: a,
            type: b,
            ts: parseInt((new Date).getTime() / 1e3),
            keyframe: YKP.isIPHONE ? 0: 1
        };
        YK.password &amp;amp;&amp;amp; (c.password = YK.password), YK.password &amp;amp;&amp;amp; YK.initConfig.client_id &amp;amp;&amp;amp; YK.config.partner_config &amp;amp;&amp;amp; 1 == YK.config.partner_config.status &amp;amp;&amp;amp; 1 == YK.config.partner_config.passless &amp;amp;&amp;amp; (c.client_id = YK.initConfig.client_id);
        var d = [19, 1, 4, 7, 30, 14, 28, 8, 24, 17, 6, 35, 34, 16, 9, 10, 13, 22, 32, 29, 31, 21, 18, 3, 2, 23, 25, 27, 11, 20, 5, 15, 12, 0, 33, 26], e = encodeURIComponent(encode64(rc4(translate(YK.mk.a4 + &quot;poz&quot; + YKP.userCache.a2, d).toString(), YKP.userCache.sid + &quot;_&quot; + a + &quot;_&quot; + YKP.userCache.token)));
        c.ep = e, c.sid = YKP.userCache.sid, c.token = YKP.userCache.token, c.ctype = &quot;12&quot;, c.ev = &quot;1&quot;, c.oip = YK.v.data.security.ip;
        var f = &quot;http://pl.youku.com/playlist/m3u8?&quot; + urlParameter(c);
        return f;
    };
    YK.mk = {}, YK.mk.a3 = &quot;b4et&quot;, void(YK.mk.a4 = &quot;boa4&quot;)
    function decode64(a) {
        if (!a)
            return &quot;&quot;;
        a = a.toString();
        var b, c, d, e, f, g, h, i = new Array( - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 62, - 1, - 1, - 1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, - 1, - 1, - 1, - 1, - 1, - 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, - 1, - 1, - 1, - 1, - 1);
        for (g = a.length, f = 0, h = &quot;&quot;; g &amp;gt; f;) {
            do
                b = i[255 &amp;amp; a.charCodeAt(f++)];
            while (g &amp;gt; f&amp;amp;&amp;amp;-1 == b);
            if ( - 1 == b)
                break;
            do
                c = i[255 &amp;amp; a.charCodeAt(f++)];
            while (g &amp;gt; f&amp;amp;&amp;amp;-1 == c);
            if ( - 1 == c)
                break;
            h += String.fromCharCode(b&amp;lt;&amp;lt;2 | (48 &amp;amp; c)&amp;gt;&amp;gt;4);
            do {
                if (d = 255 &amp;amp; a.charCodeAt(f++), 61 == d)
                    return h;
                d = i[d]
            }
            while (g &amp;gt; f&amp;amp;&amp;amp;-1 == d);
            if ( - 1 == d)
                break;
            h += String.fromCharCode((15 &amp;amp; c)&amp;lt;&amp;lt;4 | (60 &amp;amp; d)&amp;gt;&amp;gt;2);
            do {
                if (e = 255 &amp;amp; a.charCodeAt(f++), 61 == e)
                    return h;
                e = i[e]
            }
            while (g &amp;gt; f&amp;amp;&amp;amp;-1 == e);
            if ( - 1 == e)
                break;
            h += String.fromCharCode((3 &amp;amp; d)&amp;lt;&amp;lt;6 | e)
        }
        return h
    }
    function rc4(a, b) {
        for (var c, d = [], e = 0, f = &quot;&quot;, g = 0; 256 &amp;gt; g; g++)
            d[g] = g;
        for (g = 0; 256 &amp;gt; g; g++)
            e = (e + d[g] + a.charCodeAt(g%a.length))%256, c = d[g], d[g] = d[e], d[e] = c;
        g = 0, e = 0;
        for (var h = 0; h &amp;lt; b.length; h++)
            g = (g + 1)%256, e = (e + d[g])%256, c = d[g], d[g] = d[e], d[e] = c, f += String.fromCharCode(b.charCodeAt(h)^d[(d[g] + d[e])%256]);
        return f
    }
    function translate(a, b) {
        for (var c = [], d = 0; d &amp;lt; a.length; d++) {
            var e = 0;
            e = a[d] &amp;gt;= &quot;a&quot; &amp;amp;&amp;amp; a[d] &amp;lt;= &quot;z&quot; ? a[d].charCodeAt(0) - &quot;a&quot;.charCodeAt(0) : a[d] - &quot;0&quot; + 26;
            for (var f = 0; 36 &amp;gt; f; f++)
                if (b[f] == e) {
                    e = f;
                    break
                }
            e &amp;gt; 25 ? c[d] = e - 26 : c[d] = String.fromCharCode(e + 97)
        }
        return c.join(&quot;&quot;)
    }

    var encode64 = function(a) {
        if (!a)
            return &quot;&quot;;
        a = a.toString();
        var b, c, d, e, f, g, h = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;
        for (d = a.length, c = 0, b = &quot;&quot;; d &amp;gt; c;) {
            if (e = 255 &amp;amp; a.charCodeAt(c++), c == d) {
                b += h.charAt(e&amp;gt;&amp;gt;2), b += h.charAt((3 &amp;amp; e)&amp;lt;&amp;lt;4), b += &quot;==&quot;;
                break
            }
            if (f = a.charCodeAt(c++), c == d) {
                b += h.charAt(e&amp;gt;&amp;gt;2), b += h.charAt((3 &amp;amp; e)&amp;lt;&amp;lt;4 | (240 &amp;amp; f)&amp;gt;&amp;gt;4), b += h.charAt((15 &amp;amp; f)&amp;lt;&amp;lt;2), b += &quot;=&quot;;
                break
            }
            g = a.charCodeAt(c++), b += h.charAt(e&amp;gt;&amp;gt;2), b += h.charAt((3 &amp;amp; e)&amp;lt;&amp;lt;4 | (240 &amp;amp; f)&amp;gt;&amp;gt;4), b += h.charAt((15 &amp;amp; f)&amp;lt;&amp;lt;2 | (192 &amp;amp; g)&amp;gt;&amp;gt;6), b += h.charAt(63 &amp;amp; g)
        }
        return b
    }
    var urlParameter = function(a) {
        var b = [];
        for (var c in a)
            b.push(c + &quot;=&quot; + a[c]);
        return b.join(&quot;&amp;amp;&quot;)
    }

    $.ajax(
        {
            type:'get',
            url : BuildVideoInfo._url,
            dataType : 'jsonp',
            jsonp:&quot;callback&quot;,
            success  : function(data) {
            },
            error : function(request, msg, e) {
            }
        }
    );
    return &quot;requestJS&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;坑2---如何调用这段-js-代码&quot;&gt;坑2 - 如何调用这段 js 代码&lt;/h3&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;webView&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;stringByEvaluatingJavaScript(from:)&lt;/code&gt; 调用, 并且传入解析出来的视频&lt;code class=&quot;highlighter-rouge&quot;&gt;v_id&lt;/code&gt;
注: js中传入的字符串参数需要使用单引号 &lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt; 括起来&lt;/p&gt;

&lt;h3 id=&quot;坑3---如何获取到-js-中解析出来的-url&quot;&gt;坑3 - 如何获取到 js 中解析出来的 url&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;中是异步解析&lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; , 不能立即返回结果.
解决办法: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;中获取到&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;后, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;location.href = url&lt;/code&gt;资源重定向, 然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;webView&lt;/code&gt; 的代理方法&lt;code class=&quot;highlighter-rouge&quot;&gt;webView(_ webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType) -&amp;gt; Bool&lt;/code&gt;中根据自己定义的规则进行拦截, 最后将获取到的&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;回调出去.&lt;/p&gt;

&lt;h3 id=&quot;坑3---tableview上播放视屏-会出现复用问题&quot;&gt;坑3 - tableView上播放视屏, 会出现复用问题&lt;/h3&gt;
&lt;p&gt;说明: 项目中的视频播放使用了库&lt;a href=&quot;https://github.com/BrikerMan/BMPlayer&quot;&gt;BMPlayer&lt;/a&gt;, 感谢开源社区的贡献.
因为tableViewCell可以复用, 所以滑动后, 会有多个&lt;code class=&quot;highlighter-rouge&quot;&gt;cell&lt;/code&gt;同时播放视频
解决办法: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;的代理方法&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {}&lt;/code&gt;中移除不复用&lt;code class=&quot;highlighter-rouge&quot;&gt;cell&lt;/code&gt;上的视频播放器&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        guard let videoCell = cell as? VideoCell else {
            return
        }
        let view = videoCell.bgView.subviews.last
        
        if currentIndexPath == indexPath {
            // 当前cell需要播放视屏
            if (view as? BMPlayer) == nil, player.avPlayer != nil {
                videoCell.bgView.addSubview(player)
                player.snp.remakeConstraints { (make) in
                    make.edges.equalTo(videoCell.imgV)
                }
            }
        } else {
            // 该cell为复用的cell, 需要移除播放器
            if let playerV = view as? BMPlayer {
                playerV.removeFromSuperview()
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;坑4---播放某一个视频后-滑动-tableview--正在播放视频的-cell-虽然已经不在屏幕上显示了-但是视频仍在继续播放&quot;&gt;坑4 - 播放某一个视频后, 滑动 tableView , 正在播放视频的 Cell 虽然已经不在屏幕上显示了, 但是视频仍在继续播放&lt;/h3&gt;
&lt;p&gt;解决办法: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;的代理方法&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {}&lt;/code&gt;中加入如下代码, 如果当前&lt;code class=&quot;highlighter-rouge&quot;&gt;Cell&lt;/code&gt; 不在显示, 则暂停播放&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       if let visibleIndexPath = tableView.indexPathsForVisibleRows,visibleIndexPath.contains(currentIndexPath) {
            if !player.isPlaying {
                player.play()
            }
        } else {
            player.pause()
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;坑5---tableview-的点击代理方法中-不能使用同步的弹出框&quot;&gt;坑5 - tableView 的点击代理方法中, 不能使用同步的弹出框&lt;/h3&gt;
&lt;p&gt;注: 弹出框的同步调用可以参考我的这篇文章&lt;a href=&quot;http://www.jianshu.com/p/95df9f07b5f2&quot;&gt;iOS同步调用对话框 RunLoop的使用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网络状态监控, 使用到了库&lt;a href=&quot;https://github.com/ashleymills/Reachability.swift&quot;&gt;ReachabilitySwift&lt;/a&gt;, 感谢开源社区的贡献.&lt;/p&gt;

&lt;p&gt;当用户点击播放视频时, 需要判断当前用户的网络状态. 如果使用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;WiFi&lt;/code&gt;则可以播放视频; 如果使用的是移动网络, 则需要提示用用户”当前正在使用移动网络, 是否继续播放?”.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;的点击代理方中使用此方式, 对话框弹不出来, 并且界面处于阻塞状态, 退回桌面, 再次进入APP, 出现弹出框; 点击取消或确定, 同样不能结束对话框, 退回桌面, 再次进入APP, 对话框才消失.&lt;/p&gt;

&lt;p&gt;解决办法: 在&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;的 &lt;code class=&quot;highlighter-rouge&quot;&gt;cell&lt;/code&gt;上加按钮, 通过点击按钮的回调使用同步对话框.&lt;/p&gt;

&lt;h3 id=&quot;坑6---视频的全屏播放&quot;&gt;坑6 - 视频的全屏播放&lt;/h3&gt;
&lt;p&gt;点击全屏播放视频, 需要模态出一个全屏播放的控制器.
在&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;的主控制器中, 把所有页面的状态都设置为横屏&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return UIInterfaceOrientationMask.portrait
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在模态出的全屏播放控制器, 旋转屏幕&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return [.landscapeRight, .landscapeLeft]
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;更多屏幕旋转的知识请参考&lt;a href=&quot;https://lvwenhan.com/ios/458.html&quot;&gt;如何用代码控制以不同屏幕方向打开新页面【iOS】&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;坑7---tableview-的头部下拉放大效果实现&quot;&gt;坑7 - tableView 的头部下拉放大效果实现&lt;/h3&gt;
&lt;p&gt;网上参考教程很多, 不再赘述&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;
&lt;p&gt;项目中还有很多bug, 及很多待优化的地方; &lt;code class=&quot;highlighter-rouge&quot;&gt;Nunchakus &lt;/code&gt;作为自己练手的一个小项目, 我会对它持续改进, 并添加一些其他的功能.另外希望各路大神可以提一些改进的意见或建议.&lt;/p&gt;

&lt;h1 id=&quot;还有就是项目git地址在这猛戳这里&quot;&gt;还有——就是项目git地址在这&lt;a href=&quot;https://github.com/YQqiang/Nunchakus&quot;&gt;猛戳这里&lt;/a&gt;&lt;/h1&gt;

</description>
      </item>
    
      <item>
        <title>git 日常使用小结</title>
        <link>http://localhost:4000/2017/04/07/git-%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/07/git-%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93.html</guid>
        <pubDate>Fri, 07 Apr 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-74d949e6c7fd8c79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-简介&quot;&gt;Git 简介&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;分布式控制系统
    &lt;ol&gt;
      &lt;li&gt;版本库本地化, 支持离线提交, 相对独立不影响协同开发.&lt;/li&gt;
      &lt;li&gt;更少的 “仓库污染”.&lt;/li&gt;
      &lt;li&gt;把内容按元数据方式存储, 完整克隆版本库.&lt;/li&gt;
      &lt;li&gt;支持快速切换分支方便合并, 比较合并性能好.&lt;/li&gt;
      &lt;li&gt;分布式版本库, 无单点故障, 内容完整性好.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;开发模式&quot;&gt;开发模式&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-69ee98a20b4137a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;开发模式&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-基础命令&quot;&gt;Git 基础命令&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;git-配置&quot;&gt;git 配置&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git config -l    # 查看当前配置
 git config --global user.name &quot;YQqiang&quot;    # 设置用户名
 git config --global user.email xxxx@gmail.com    # 设置邮箱
 git config --golbal alias.ci commit    # 设置git 命令的别名
 git config --golbal alias.co checkout    # 设置git 命令的别名
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ~/.gitconfig     # 全局配置文件
 .git    # 在库的顶级目录当中, 包含项目的所有对象, 提交记录, 配置
 .gitignore    # 记录要忽略的文件
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;获得-git-仓库&quot;&gt;获得 git 仓库&lt;/h3&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;
        &lt;blockquote&gt;
          &lt;p&gt;初始化后, 在当前目录会出现一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;的目录. 所有&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;需要的数据和资源都存放在这个目录中.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;
        &lt;blockquote&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:YQqiang/MoyaDemo.git&lt;/code&gt;
 获取社区代码, 但是需要有相关权限才能访问 (使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt; 生成 &lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt;, 将&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt; 添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt;)&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/YQqiang/MoyaDemo.git&lt;/code&gt;
    获取&lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;中提供的第三方资源&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;提交文件&quot;&gt;提交文件&lt;/h3&gt;

    &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-f87840bb3b7548c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;提交文件&quot; /&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 查看文件状态&lt;/li&gt;
      &lt;li&gt;文件所处三种状态
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;working tree&lt;/code&gt;    对应.git/之外的项目文件或目录&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index tree&lt;/code&gt; (add 后)    对应.git/index&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; (commit 后)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 相关意义
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; 代表最后一次提交&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD^&lt;/code&gt; 代表最后一次提交的父提交 等价于HEAD~1&amp;gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD~2&lt;/code&gt; 倒数第二次提交
 —&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt; 显示&lt;code class=&quot;highlighter-rouge&quot;&gt;working tree&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;index tree&lt;/code&gt; 之间的差异&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff --staged&lt;/code&gt; 用户来查看&lt;code class=&quot;highlighter-rouge&quot;&gt;index tree&lt;/code&gt; 中的内容 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;中的区别&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff HEAD &lt;/code&gt; 显示&lt;code class=&quot;highlighter-rouge&quot;&gt;working tree&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;index tree&lt;/code&gt; 两者之和与&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;中的区别, 用来看总共的修改内容&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff file_name&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff dir_name/&lt;/code&gt; 查看指定文件或目录的修改&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff one_commit_hash another_commit_hash&lt;/code&gt; 查看两次&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 之间的差异&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff one_branch_name another_branch_name&lt;/code&gt; 对比两个分支之间的差异
 —&lt;/li&gt;
      &lt;li&gt;跟踪新文件&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add file_name&lt;/code&gt;  将本地指定文件名或目录(&lt;em&gt;新增 和 修改, 没有删除&lt;/em&gt;) 的文件添加到暂缓区&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; 将本地所有的(&lt;em&gt;新增 和 修改, 没有删除&lt;/em&gt;) 的文件添加到暂缓区. 同样可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;来匹配&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -u&lt;/code&gt; 将本地的(&lt;em&gt;修改 和 删除, 没有新增&lt;/em&gt;) 的文件添加到暂缓区&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -A&lt;/code&gt; 将本地所有改动添加到暂缓区 (&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -A  =  git add . + git add -u&lt;/code&gt;)
 —&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;comment&quot;&lt;/code&gt; 提交暂缓区中的内容(已经add) 并添加注释&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -a&lt;/code&gt; 把修改的文件添加到暂缓区(不包括新建(untracked)的文件), 然后提交&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -i&lt;/code&gt;  通常在文件冲突解决以后, 提交解决的冲突时使用.
 —&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 从远程获取最新版本到本地, 不会自动&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 从远程获取最新版本到本地并&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;到本地, 相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;在实际使用中, &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 更安全一些, 因为在&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;前我们可以查看更新情况, 然后再决定是否合并
 —&lt;/li&gt;
      &lt;li&gt;解决冲突
        &lt;ul&gt;
          &lt;li&gt;根据冲突提示, 逐个查找冲突文件中有冲突的地方进行手动解决&lt;/li&gt;
          &lt;li&gt;使用git冲突解决工具, 如: P4merge, kdiff3
 —&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin branch_name&lt;/code&gt; 将本地分支推送到&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;主机的某分支, 如果该分支不存在, 就新建该远程分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt; -u (upstream) 指定&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; 为默认主机, 后面就可以不加任何参数使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 了&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push --all origin&lt;/code&gt; 将所有本地分支都推送到&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;主机&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin :branch_name&lt;/code&gt; 删除远程分支(即推送一个空分支到主机)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin local:remote&lt;/code&gt; 完整格式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;查看提交历史&quot;&gt;查看提交历史&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; 查看提交记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -n&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;是一个正整数, 查看前n次修改&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log file1 file2&lt;/code&gt; 查看&lt;code class=&quot;highlighter-rouge&quot;&gt;file1&lt;/code&gt;文件, &lt;code class=&quot;highlighter-rouge&quot;&gt;file2&lt;/code&gt;文件的提交记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log file/&lt;/code&gt; 查看&lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;文件夹下所有文件的提交记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log v1&lt;/code&gt; 此时的&lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; 代表的是分支的名字&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -- v1&lt;/code&gt; 此时的&lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; 代表的是名为&lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt;的文件&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --oneline&lt;/code&gt; 一行显示一条log&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -p&lt;/code&gt; 查看详细修改内容&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --stat&lt;/code&gt; 查看提交统计信息&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -graph&lt;/code&gt; 显示何时出现了分支和合并等信息&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log commit_id&lt;/code&gt; 查询&lt;code class=&quot;highlighter-rouge&quot;&gt;commit_id&lt;/code&gt;之前的记录, 包括&lt;code class=&quot;highlighter-rouge&quot;&gt;commit_id&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log commit_id_1 commit_id_2&lt;/code&gt; 查询&lt;code class=&quot;highlighter-rouge&quot;&gt;commit_id_1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit_id_2&lt;/code&gt; 之间的记录, 包括&lt;code class=&quot;highlighter-rouge&quot;&gt;commit_id_1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit_id_2&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log commit_id_1..commit_id_2&lt;/code&gt; 同上, 但是不包括&lt;code class=&quot;highlighter-rouge&quot;&gt;commit_id_1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log v1.0..&lt;/code&gt; 查询从&lt;code class=&quot;highlighter-rouge&quot;&gt;v1.0&lt;/code&gt; 之后的提交历史记录(不包含&lt;code class=&quot;highlighter-rouge&quot;&gt;v1.0&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log test..master&lt;/code&gt; 查询&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支中的提交记录但不包含&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;分支记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log master..test&lt;/code&gt; 查询&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;分支中的提交记录但不包含&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log master...test&lt;/code&gt; 查询&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;或 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;分支中的提交记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log test --not master&lt;/code&gt; 屏蔽&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --author='yuqiangsun'&lt;/code&gt; 查询指定作者的提交记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --grep='日期'&lt;/code&gt; 列出所有包含&lt;code class=&quot;highlighter-rouge&quot;&gt;日期&lt;/code&gt;字样的提交信息说明的提交记录&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --name-only&lt;/code&gt; 仅在提交信息后显示已修改的文件清单&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --pretty=oneline&lt;/code&gt; 单行显示每次的提交(commit_id 和 注释)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --pretty=format:&quot;%H %an %ae %ad %s&quot;&lt;/code&gt;  格式化输出log&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;选项&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%H&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提交对象（commit）的完整哈希字串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%T&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;树对象（tree）的完整哈希字串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%t&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;树对象的简短哈希字串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%P&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;父对象（parent）的完整哈希字串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%p&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;父对象的简短哈希字串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%an&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;作者（author）的名字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%ae&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;作者的电子邮件地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%ad&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;作者修订日期(可以用 -date= 选项定制格式)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%ar&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;作者修订日期，按多久以前的方式显示&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%cn&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提交者(committer)的名字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%ce&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提交者的电子邮件地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%cd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提交日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%cr&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提交日期，按多久以前的方式显示&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提交说明&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;撤销操作&quot;&gt;撤销操作&lt;/h3&gt;

    &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-43a1c6121896f297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Rebase&quot; /&gt;&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;http://gitbook.liuhui998.com/4_2.html&quot;&gt;rebase 详解&lt;/a&gt;
 rebase 命令执行后, 实际上是将分支点从C移动了G, 这样分支也就具有了C到G的功能&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-93800dc23b5cb4d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;reset&quot; /&gt;
    * &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; 将当前的工作目录完全回滚到指定的版本号
    * &lt;code class=&quot;highlighter-rouge&quot;&gt;revert&lt;/code&gt; 还原一个版本的修改, 必须提供一个具体git版本号
    * 区别
        * &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; 是指将当前head的内容重置, 不会留下任何痕迹
        * &lt;code class=&quot;highlighter-rouge&quot;&gt;revert&lt;/code&gt; 是撤销某次提交, 但是这次撤销也会作为一次提交进行保存&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;打标签&quot;&gt;打标签&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;查看tag
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -l&lt;/code&gt; 查看所有tag, -l 可以省略&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;创建tag
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag v1.2.4&lt;/code&gt; 基于最新提交创建标签&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -a v1.2.4 -m &quot;tag message&quot;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -a v1.2.4 31dd771&lt;/code&gt; 补打tag, 前提是记得commit&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;分享tag
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin tag v1.2.4&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin --tags&lt;/code&gt; 提交所有tag到服务器&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;删除tag
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -d v1.2.4&lt;/code&gt;删除本地tag&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin :v1.2.4&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;分支管理&quot;&gt;分支管理&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;新建分支-本地&quot;&gt;新建分支 (本地)&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch new_branch&lt;/code&gt; 新建分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout branch_name&lt;/code&gt; 切换分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b new_branch&lt;/code&gt; 从当前分支新建分支(等同上面两条命令)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b new_branch commit_id &lt;/code&gt; 从某次提交点上新建分支&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;新建分支-远程&quot;&gt;新建分支 (远程)&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin branch_name&lt;/code&gt; 将本地分支推送到&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;主机的某分支, 如果该分支不存在, 就新建该远程分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt; -u (upstream) 指定&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; 为默认主机, 后面就可以不加任何参数使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 了&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin local:remote&lt;/code&gt; 完整格式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;查看分支&quot;&gt;查看分支&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -l&lt;/code&gt; 查看本地分支, -l 可以省略&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -r&lt;/code&gt; 查看远程分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -a&lt;/code&gt; 查看所有分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -v&lt;/code&gt; 查看各分支最后一次提交对象信息&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -vv&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;修改分支&quot;&gt;修改分支&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -m old_branch new_branch&lt;/code&gt; 本地分支重命名&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch --set-upstream-to=origin/&amp;lt;远程分支&amp;gt; &amp;lt;本地分支&amp;gt;&lt;/code&gt; 设置本地分支对应的远程分支, 或者需要更改, 在项目根目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;, 直接修改&lt;code class=&quot;highlighter-rouge&quot;&gt;merge = refs/heads/&amp;lt;分支名称&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;合并分支&quot;&gt;合并分支&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge branch_name&lt;/code&gt; 将branch合并到当前分支&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;删除分支&quot;&gt;删除分支&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -d branch_name&lt;/code&gt; 删除分支, 分支中所有文件已提交, 是个干净的工作目录, 不能再该分支下执行该命令&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -D branch_name&lt;/code&gt; 强制删除分支, 不能在该分支下执行该命令&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin :branch_name&lt;/code&gt; 删除远程分支(即推送一个空分支到主机)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;贮藏工作进度&quot;&gt;贮藏工作进度&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry-pick commit_id&lt;/code&gt; 用于把另一个本地分支的commit修改应用到当前分支&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt; 保存当前的工作进度. 会分别对&lt;code class=&quot;highlighter-rouge&quot;&gt;working tree&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; 的状态进行保存&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash save &quot;message&quot; &lt;/code&gt; 指定保存信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash list&lt;/code&gt; 显示暂存列表&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash pop&lt;/code&gt; 恢复最新保存的工作进度, 并从贮藏表中删除&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash apply&lt;/code&gt; 回复最新保存的工作进度,  &lt;strong&gt;不&lt;/strong&gt; 从贮藏表中删除&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash ( pop | apply ) stash@{1}&lt;/code&gt; 恢复指定的贮藏&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash clear&lt;/code&gt; 清空贮藏表&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用技巧&quot;&gt;使用技巧&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;用另一分支source_branch的指定文件直接覆盖当前分支的相应文件&quot;&gt;用另一分支”source_branch”的指定文件直接覆盖当前分支的相应文件&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout B_branch
cd path/to/f.txt
git checkout A_bracn  f.txt
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;把当前修改的内容保存到暂缓区&quot;&gt;把当前修改的内容保存到暂缓区&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git stash save &quot;添加一些注释在这里
git stash list # 查看暂缓区中的内容列表     git stash pop stash@{1}  # 出栈
git stash apply stash@{1} # 应用
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;放弃对某一个文件的修改内容&quot;&gt;放弃对某一个文件的修改内容&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout file_name
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;放弃当前所有内容的修改&quot;&gt;放弃当前所有内容的修改&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git stash 
git stash drop
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;使用某个分支的文件替换某个分支的文件&quot;&gt;使用某个分支的文件替换某个分支的文件&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git 使用branch_A分支的file1文件替换branch_B的file1文件
(branch_B) $ git checkout branch_A file1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
      </item>
    
      <item>
        <title>BgImgTextView</title>
        <link>http://localhost:4000/2017/03/20/BgImgTextView.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/20/BgImgTextView.html</guid>
        <pubDate>Mon, 20 Mar 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-86506572fc2c26e6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;半个月没有更新博客了, 俗话说 &lt;strong&gt;&lt;em&gt;三天不学习赶不上刘少奇&lt;/em&gt;&lt;/strong&gt; ; 这半个月又不知被别人甩出去多远😂😂😂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说说正题吧~~~~&lt;/p&gt;

&lt;p&gt;在改项目中的bug时, 发现&lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt;的内容不能设置滑动的内边距, 以致于给textView添加背景图片后, 内容滑动会超出背景图片; 项目中的&lt;code class=&quot;highlighter-rouge&quot;&gt;textView&lt;/code&gt; 的封装是继承自&lt;code class=&quot;highlighter-rouge&quot;&gt;UITextView&lt;/code&gt; , 改起来比较棘手&lt;del&gt;(是我不知道如何去改, 嘘…….)&lt;/del&gt;, 所以决定手撸一个.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps: 有大神知道如何设置&lt;code class=&quot;highlighter-rouge&quot;&gt;textView&lt;/code&gt;滑动的内边距, 还望指教, 非常感谢.
本人菜鸟一枚, 才疏学浅, 望大神们多指教.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;bug演示&quot;&gt;bug演示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-c9f9191fc4441220.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;bug&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bgimgtextview&quot;&gt;BgImgTextView&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;带有占位文字(&lt;code class=&quot;highlighter-rouge&quot;&gt;placeholder&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;可以添加背景图片(&lt;code class=&quot;highlighter-rouge&quot;&gt;bgImgName&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;bgImg&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;可以给内容设置内边距(&lt;code class=&quot;highlighter-rouge&quot;&gt;edgeInsets&lt;/code&gt;), 使其内容滑动时不超过背景图片&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;效果展示&quot;&gt;效果展示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-3bed97a0cfc42175.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;BgImgTextView.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github地址&quot;&gt;github地址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/YQqiang/BgImgTextView&quot;&gt;BgImgTextView&lt;/a&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Swift-技能小结(二)</title>
        <link>http://localhost:4000/2017/03/07/Swift-%E6%8A%80%E8%83%BD%E5%B0%8F%E7%BB%93(%E4%BA%8C).html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/07/Swift-%E6%8A%80%E8%83%BD%E5%B0%8F%E7%BB%93(%E4%BA%8C).html</guid>
        <pubDate>Tue, 07 Mar 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-bc4c89ddbac7a99a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上一篇: &lt;a href=&quot;http://www.jianshu.com/p/e52ac996055a&quot;&gt;Swift-技能小结(一)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一, 自定义运算符, 判断是否是’null’字符串
   二, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;CGBlendMode&lt;/code&gt;更改图片颜色&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;自定义运算符-&quot;&gt;自定义运算符 ?*&lt;/h1&gt;
&lt;p&gt;在开发中经常需要把接口的数据展示到界面上, 如果直接返回&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;null&quot;&lt;/code&gt;, 我们又不处理的话, 那么直接显示&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;null&quot;&lt;/code&gt;在APP中, 是非常影响UI界面的美观和用户的体验.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;处理方法: 自定义运算符 &lt;code class=&quot;highlighter-rouge&quot;&gt;?*&lt;/code&gt; 去代替&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;字符串&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let str = &quot;null&quot;
print(str ?* &quot;--&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;结果为:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;实现代码如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 运算符重载: 中置      前置      后置
 infix    prefix   postfix
 组合赋值运算符: assignment
 自定义运算符:
 全局域使用 operator 关键字声明
 自定义中置运算符的优先级和结合性:
 结合性(associativity) 取值有: left right none
 优先级(precedence)  默认为100
 Operator should no longer be declared with body; use a precedence group instead
 */
infix operator ?* : FriendlyString
precedencegroup FriendlyString {
    associativity: left             // 左结合
    higherThan: AdditionPrecedence  // 优先级高于加法类型
    lowerThan: MultiplicationPrecedence // 优先级低于减法类型
}

/// ?* 代替系统的 ?? 使用, 可以过滤 &quot;null&quot; 字符串
/// 使用方法 例: str ?* &quot;--&quot;
/// 结果为: 如果`str` 为空 或 `null`, 则返回 &quot;--&quot;字符串
///
/// - Parameters:
///   - str: 原始字符串
///   - defaultStr: 代替的字符串
/// - Returns: 过滤后的字符串
func ?*(str: String?, defaultStr: String) -&amp;gt; String {
    let s = str ?? &quot;&quot;
    if s == &quot;null&quot; || s == &quot;&amp;lt;null&amp;gt;&quot; || s.isKind(of: NSNull.self) {
        return defaultStr
    }
    return s
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以扩展一些方法, 当字符串为&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;null&quot;&lt;/code&gt;时, 替换为固定的字符串
例:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 过滤字符串, 默认返回一个空字符 &quot;&quot;
///
/// - Parameter str: 原始字符串
/// - Returns: 过滤后的字符串
func defaultEmptyStr(_ str: String?) -&amp;gt; String {
    return str ?* &quot;&quot;
}

/// 过滤字符串, 默认返回一个 &quot;--&quot; 字符串
///
/// - Parameter str: 原始字符串
/// - Returns: 过滤后的字符串
func default__str(_ str: String?) -&amp;gt; String {
    return str ?* &quot;--&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defaultEmptyStr(_ :)&lt;/code&gt; 函数, 当字符串为&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;null&quot;&lt;/code&gt; 时, 默认使用一个空字符
   &lt;code class=&quot;highlighter-rouge&quot;&gt;default__str(_ :)&lt;/code&gt; 函数, 当字符串为&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;null&quot;&lt;/code&gt;时, 默认返回&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;--&quot;&lt;/code&gt;代替空字符&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;使用-cgblendmode-更改图片颜色&quot;&gt;使用 &lt;strong&gt;&lt;em&gt;CGBlendMode&lt;/em&gt;&lt;/strong&gt; 更改图片颜色&lt;/h1&gt;
&lt;p&gt;例: 原始图片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-815f48201ea31e97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;原始图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更改颜色后的图片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-b56d973687b8de20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;更改颜色后的图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码实现:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension UIImage {
    func image(_ tintColor: UIColor, blendMode: CGBlendMode = .overlay) -&amp;gt; UIImage {
        UIGraphicsBeginImageContextWithOptions(size, false, 0.0)
        tintColor.setFill()
        let bounds = CGRect(x: 0, y: 0, width: size.width, height: size.height)
        UIRectFill(bounds)
        draw(in: bounds, blendMode: blendMode, alpha: 1.0)
        if blendMode != .destinationIn {
            draw(in: bounds, blendMode: .destinationIn, alpha: 1.0)
        }
        let tintedImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return tintedImage ?? UIImage()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用方法:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;image1.image = UIImage(named: &quot;location&quot;)?.image(.red)
image2.image = UIImage(named: &quot;location&quot;)?.image(.orange)
image3.image = UIImage(named: &quot;location&quot;)?.image(.gray)
image4.image = UIImage(named: &quot;location&quot;)?.image(.yellow)
image5.image = UIImage(named: &quot;location&quot;)?.image(.brown)
image6.image = UIImage(named: &quot;location&quot;)?.image(.purple)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CGBlendMode&lt;/code&gt;的方法详细描述请参考&lt;a href=&quot;https://onevcat.com/#blog&quot;&gt;喵神&lt;/a&gt;的博客&lt;a href=&quot;https://onevcat.com/2013/04/using-blending-in-ios/&quot;&gt;iOS中使用blend改变图片颜色&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>使用NSUserDefaults持久化登录接口数据的填坑笔记</title>
        <link>http://localhost:4000/2017/02/25/%E4%BD%BF%E7%94%A8NSUserDefaults%E6%8C%81%E4%B9%85%E5%8C%96%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A1%AB%E5%9D%91%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/25/%E4%BD%BF%E7%94%A8NSUserDefaults%E6%8C%81%E4%B9%85%E5%8C%96%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A1%AB%E5%9D%91%E7%AC%94%E8%AE%B0.html</guid>
        <pubDate>Sat, 25 Feb 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-32793e09e7e124d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;项目中一直是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserDefaults&lt;/code&gt;把登录接口获取到的用户信息, 保存在本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;plist&lt;/code&gt;文件. 一切都是那么的Easy, 世界是多么的美好. 直到今天(2017-02-25), 切换服务器(我们APP支持自定义服务器)的时候再登录, 直接闪退, &lt;em&gt;**what fuck !!!!!! **&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;寻找闪退原因&quot;&gt;寻找闪退原因&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;** ‘Attempt to insert non-property list object **&lt;/em&gt;
这是控制台给的闪退原因&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;断点调试, 发现崩在了 &lt;code class=&quot;highlighter-rouge&quot;&gt;[[NSUserDefaults standardUserDefaults] setValuesForKeysWithDictionary:dic];&lt;/code&gt; 上, 然后就是对比之前和现在的接口数据有什么不一样. 发现接口多返回了一个字段&lt;code class=&quot;highlighter-rouge&quot;&gt;sysUser&lt;/code&gt;, 该字段是个字典类型, 里面存储了好多个键值对.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;难道是&lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserDefaults&lt;/code&gt;不支持字典嵌套字典的格式, 什么鬼????&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Google 搜索, 基本上都是说&lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserDefaults&lt;/code&gt;不支持存储自定义的类型, 需要转为&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 类型才能存储. 但是在这里我是直接把接口的数据存储的, 根本不存在自定义的类型啊?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;仔细看了一下接口数据, 发现接口数据有&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&amp;lt;null&amp;gt;&quot;&lt;/code&gt;, 我靠, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserDefaults&lt;/code&gt;解析不了这种类型啊.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;解决方案&quot;&gt;解决方案&lt;/h1&gt;
&lt;p&gt;既然知道了原因所在, 那就对症下药吧!!!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;MJExtension&lt;/code&gt; 把登录接口的数据转换为模型&lt;code class=&quot;highlighter-rouge&quot;&gt;LoginModel&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LoginModel *account = [LoginModel mj_objectWithKeyValues:result];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;继续使用&lt;code class=&quot;highlighter-rouge&quot;&gt;MJExtension&lt;/code&gt; 把&lt;code class=&quot;highlighter-rouge&quot;&gt;account&lt;/code&gt; 转为字典, 这样就过滤掉&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;null&amp;gt;&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *dic = [account mj_keyValues];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;最后再使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserDefaults&lt;/code&gt; 持久化数据
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[NSUserDefaults standardUserDefaults] setValuesForKeysWithDictionary:dic];
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;写在最后&quot;&gt;写在最后&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;填完坑, 瞬间感觉, 天还很蓝, 世界还很美好😜&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>RxSwift + Moya + ObjectMapper + MVVM 的网络请求</title>
        <link>http://localhost:4000/2017/02/23/RxSwift-+-Moya-+-ObjectMapper-+-MVVM-%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/23/RxSwift-+-Moya-+-ObjectMapper-+-MVVM-%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.html</guid>
        <pubDate>Thu, 23 Feb 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-ef0f41eb3947d975.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2016年底的时候, 项目经理决定把我们的项目以&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;架构方式进行重构; 当时&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;已经是3.0版本了, 也是时候转战Swift了.  之所以选择使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;实现&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;, 而没有使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;RAC&lt;/code&gt;, 是因为我觉得&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;更符合&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;的编程思想.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;首先送上-demo-地址&quot;&gt;首先送上 &lt;strong&gt;&lt;em&gt;Demo&lt;/em&gt;&lt;/strong&gt; 地址&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/YQqiang/MoyaDemo&quot;&gt;Demo地址&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;mvvm浅析&quot;&gt;MVVM浅析&lt;/h1&gt;
&lt;p&gt;| M| Model|负责数据层|
|:-:|:-:|:-:|
| V| ViewController|负责View|
| VM| ViewModel|负责业务逻辑|&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt; 负责网络请求和数据解析, 可以再抽出一层网络请求层&lt;code class=&quot;highlighter-rouge&quot;&gt;APIService&lt;/code&gt;层;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;负责把数据解析为对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;中读取数据;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; 之间是不接触的, 相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;是它们之间的桥梁.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;构建-service-层&quot;&gt;构建 &lt;strong&gt;&lt;em&gt;Service&lt;/em&gt;&lt;/strong&gt; 层&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; 遵循 &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt;协议, 枚举的&lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;值, 为每一个接口
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum AppService: TargetType {
 case login(username: String, pwd: String)
 case video
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在枚举的扩展中定义一个网络请求的必要参数
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension AppService {
 var baseURL: URL {
     return URL(string: API_PRO)!
 }
    
 var path: String {
     switch self {
     case .login(username: _, pwd: _):
         return &quot;/login&quot;
     case .video:
         return &quot;/video&quot;
     }
 }
    
 var method: Moya.Method {
     switch self {
     case .login(username: _, pwd: _):
         return .get
     case .video:
         return .post
     }
 }
    
 var parameters: [String: Any]? {
     switch self {
     case .login(username: let username, pwd: let pwd):
         return [&quot;username&quot;: username, &quot;pwd&quot;: pwd]
     case .video:
         return [&quot;type&quot;: &quot;JSON&quot;]
     }
 }
    
 var parameterEncoding: ParameterEncoding {
     return URLEncoding.default
 }
    
 var sampleData: Data {
     return &quot;&quot;.data(using: String.Encoding.utf8)!
 }
    
 var task: Task {
     return .request
 }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;baseUrl&lt;/code&gt; , 请求头, 公共参数, 定义在一个单独的文件中;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let API_PRO = &quot;http://120.25.226.186:32812&quot;
let headerFields: [String: String] = [&quot;system&quot;: &quot;iOS&quot;,&quot;sys_ver&quot;: String(UIDevice.version())]
let publicParameters: [String: String] = [&quot;language&quot;: &quot;_zh_CN&quot;]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;RxMoyaProvider&lt;/code&gt;用于发送网络请求, 可以在创建的时候传入请求头和公共参数
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let appServiceProvider = RxMoyaProvider&amp;lt;AppService&amp;gt;.init()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;构建-model-层&quot;&gt;构建 &lt;strong&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/strong&gt; 层&lt;/h1&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt;库转模型&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;登录接口的&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class LoginModel: Mappable {
 var error: String?
 var success: String?
    
 required init?(map: Map) {
 }
    
 func mapping(map: Map) {
     error &amp;lt;- map[&quot;error&quot;]
     success &amp;lt;- map[&quot;success&quot;]
 }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;保存视频信息的&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class VideoModel: Mappable {
 var videos: [Video]?
    
 required init?(map: Map) {
 }
    
 func mapping(map: Map) {
     videos &amp;lt;- map[&quot;videos&quot;]
 }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  class Video: Mappable {
    var id: String?
    var length: Float?
    var name: String?
    var url: String?
    
    required init?(map: Map) {
    }
    
    func mapping(map: Map) {
        id &amp;lt;- map[&quot;id&quot;]
        length &amp;lt;- map[&quot;length&quot;]
        name &amp;lt;- map[&quot;name&quot;]
        url &amp;lt;- map[&quot;url&quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;构建-viewmodel-层&quot;&gt;构建 &lt;strong&gt;&lt;em&gt;ViewModel&lt;/em&gt;&lt;/strong&gt; 层&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;层发送网络请求, 获取数据, 获取到的数据保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;中, 通过回调刷新UI, 并且返回一个可观察者.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ViewModel {
    
    func login(username: String, pwd: String) -&amp;gt; Observable&amp;lt;LoginModel&amp;gt; {
        return appServiceProvider.request(.login(username: username, pwd: pwd))
            .filterSuccessfulStatusCodes()
            .mapJSON()
            .showAPIErrorToast()
            .mapObject(type: LoginModel.self)
    }
    
    func video() -&amp;gt; Observable&amp;lt;VideoModel&amp;gt; {
        return appServiceProvider.request(.video)
            .filterSuccessfulStatusCodes()
            .mapJSON()
            .showAPIErrorToast()
            .mapObject(type: VideoModel.self)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;函数中的&lt;code class=&quot;highlighter-rouge&quot;&gt;showAPIErrorToast()&lt;/code&gt;是自己定义的一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;的扩展函数, 用于在网络请求错误的时候需要做的一些操作&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Observable {
    func showAPIErrorToast() -&amp;gt; Observable&amp;lt;Element&amp;gt; {
        return self.do(onNext: { (event) in
        }, onError: { (error) in
            // TODO: 可以在此处做一些网络错误的时候的提示信息
            print(&quot;\(error.localizedDescription)&quot;)
        }, onCompleted: {
        }, onSubscribe: {
        }, onDispose: {
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;函数中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mapObject(type:)&lt;/code&gt; 是自定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;扩展函数, 用于&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; 转模型, 需要自己根据实际项目中的&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;格式, 做相应的解析.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Observable {
    func mapObject&amp;lt;T: Mappable&amp;gt;(type: T.Type) -&amp;gt; Observable&amp;lt;T&amp;gt; {
        return self.map { response in
            //if response is a dictionary, then use ObjectMapper to map the dictionary
            //if not throw an error
            guard let dict = response as? [String: Any] else {
                throw RxSwiftMoyaError.ParseJSONError
            }
            return Mapper&amp;lt;T&amp;gt;().map(JSON: dict)!
        }
    }
    
    func mapArray&amp;lt;T: Mappable&amp;gt;(type: T.Type) -&amp;gt; Observable&amp;lt;[T]&amp;gt; {
        return self.map { response in
            //if response is an array of dictionaries, then use ObjectMapper to map the dictionary
            //if not, throw an error
            guard let array = response as? [[String: Any]] else {
                throw RxSwiftMoyaError.ParseJSONError
            }
            return Mapper&amp;lt;T&amp;gt;().mapArray(JSONArray: array)!
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwiftMoyaError&lt;/code&gt;是自定义的一个错误类型枚举值, 可以返回一些错误信息, 用在&lt;code class=&quot;highlighter-rouge&quot;&gt;showAPIErrorToast()&lt;/code&gt;中提示用户的信息&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum RxSwiftMoyaError : Swift.Error {
    case ParseJSONError
    case NoRepresentor
    case NotSuccessfulHTTP
    case NoData
    case CouldNotMakeObjectError
    case BizError(resultCode: String, resultMsg: String)
}

extension RxSwiftMoyaError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case .ParseJSONError:
            return &quot;数据解析失败&quot;
        case .NoRepresentor:
            return &quot;NoRepresentor.&quot;
        case .NotSuccessfulHTTP:
            return &quot;NotSuccessfulHTTP.&quot;
        case .NoData:
            return &quot;NoData.&quot;
        case .CouldNotMakeObjectError:
            return &quot;CouldNotMakeObjectError.&quot;
        case .BizError(resultCode: let resultCode, resultMsg: let resultMsg):
            return &quot;错误码: \(resultCode), 错误信息: \(resultMsg)&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;viewcontroller-中就可以直接操作-viewmodel-发送网络请求-并且获取到模型数据&quot;&gt;&lt;strong&gt;&lt;em&gt;ViewController&lt;/em&gt;&lt;/strong&gt; 中就可以直接操作 &lt;strong&gt;&lt;em&gt;viewModel&lt;/em&gt;&lt;/strong&gt; 发送网络请求, 并且获取到模型数据&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; 中包含一个  &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt; 对象, &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;需要变化的时候, 直接让这个对象调用自己的函数, 获取到&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;数据, 刷新UI&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let disposeBag = DisposeBag()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let viewModel = ViewModel()
        viewModel.login(username: &quot;520it&quot;, pwd: &quot;520it&quot;).subscribe(onNext: { (loginModel) in
            print(&quot;---\(loginModel.success)&quot;)
        }).addDisposableTo(disposeBag)
        
        viewModel.video().subscribe(onNext: { (videoModel) in
            guard let videos = videoModel.videos else {
                return
            }
            for video in videos {
                print(&quot;----id:\(video.id)---length:\(video.length)---name:\(video.name)---url:\(video.url)&quot;)
            }
        }).addDisposableTo(disposeBag)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;结果如下所示:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---Optional(&quot;登录成功&quot;)
----id:nil---length:Optional(10.0)---name:Optional(&quot;小黄人 第01部&quot;)---url:Optional(&quot;resources/videos/minion_01.mp4&quot;)
----id:nil---length:Optional(12.0)---name:Optional(&quot;小黄人 第02部&quot;)---url:Optional(&quot;resources/videos/minion_02.mp4&quot;)
----id:nil---length:Optional(14.0)---name:Optional(&quot;小黄人 第03部&quot;)---url:Optional(&quot;resources/videos/minion_03.mp4&quot;)
----id:nil---length:Optional(16.0)---name:Optional(&quot;小黄人 第04部&quot;)---url:Optional(&quot;resources/videos/minion_04.mp4&quot;)
----id:nil---length:Optional(18.0)---name:Optional(&quot;小黄人 第05部&quot;)---url:Optional(&quot;resources/videos/minion_05.mp4&quot;)
----id:nil---length:Optional(20.0)---name:Optional(&quot;小黄人 第06部&quot;)---url:Optional(&quot;resources/videos/minion_06.mp4&quot;)
----id:nil---length:Optional(22.0)---name:Optional(&quot;小黄人 第07部&quot;)---url:Optional(&quot;resources/videos/minion_07.mp4&quot;)
----id:nil---length:Optional(24.0)---name:Optional(&quot;小黄人 第08部&quot;)---url:Optional(&quot;resources/videos/minion_08.mp4&quot;)
----id:nil---length:Optional(26.0)---name:Optional(&quot;小黄人 第09部&quot;)---url:Optional(&quot;resources/videos/minion_09.mp4&quot;)
----id:nil---length:Optional(28.0)---name:Optional(&quot;小黄人 第10部&quot;)---url:Optional(&quot;resources/videos/minion_10.mp4&quot;)
----id:nil---length:Optional(30.0)---name:Optional(&quot;小黄人 第11部&quot;)---url:Optional(&quot;resources/videos/minion_11.mp4&quot;)
----id:nil---length:Optional(32.0)---name:Optional(&quot;小黄人 第12部&quot;)---url:Optional(&quot;resources/videos/minion_12.mp4&quot;)
----id:nil---length:Optional(34.0)---name:Optional(&quot;小黄人 第13部&quot;)---url:Optional(&quot;resources/videos/minion_13.mp4&quot;)
----id:nil---length:Optional(36.0)---name:Optional(&quot;小黄人 第14部&quot;)---url:Optional(&quot;resources/videos/minion_14.mp4&quot;)
----id:nil---length:Optional(38.0)---name:Optional(&quot;小黄人 第15部&quot;)---url:Optional(&quot;resources/videos/minion_15.mp4&quot;)
----id:nil---length:Optional(40.0)---name:Optional(&quot;小黄人 第16部&quot;)---url:Optional(&quot;resources/videos/minion_16.mp4&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到此, 我们已经完成了使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt; 进行&lt;code class=&quot;highlighter-rouge&quot;&gt; MVVM&lt;/code&gt; 架构, 以及使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt; 封装网络请求层, 和使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt; 进行 &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; 转模型. 不知道小伙伴有没有感觉到 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt; 编程, 的确是很优雅呢?&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;写在最后&quot;&gt;写在最后&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/YQqiang/MoyaDemo&quot;&gt;Demo地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;自己写的博客, 内容略显粗浅, 大家可以看下面列出的博客.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;RxSwift
&lt;a href=&quot;http://www.jianshu.com/p/348bbb20b435&quot;&gt;RxSwift 中的 Observable 详解 （翻译一）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/07266f30ce5f&quot;&gt;RxSwift 中的 Subject 详解 （翻译二）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/1a8531894562&quot;&gt;RxSwift 上手详解 —— 入门篇（翻译三）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/bd8eb2f6d407&quot;&gt;RxSwift 中的 Units——一个富有哲学意味的概念（翻译四）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codertian.com/2016/11/27/RxSwift-ru-keng-ji-read-document/#more&quot;&gt;【iOS开发】RxSwift入坑解读-你所需要知道的各种概念&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codertian.com/2016/12/01/RxSwift-ru-keng-ji-learn-the-difficulty/#more&quot;&gt;【iOS开发】RxSwift入坑解读-那些难以理解的细节&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codertian.com/2016/12/10/RxSwift-shi-zhan-jie-du-base-demo/#more&quot;&gt;【iOS开发】RxSwift实战教程-核心用法&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Moya 网络请求
&lt;a href=&quot;http://www.jianshu.com/p/c1494681400b&quot;&gt;如何写出最简洁优雅的网络封装 Moya + RxSwift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codertian.com/2017/01/21/iOS-moya-ru-keng-usage/#more&quot;&gt;【iOS开发】Moya入坑记-用法解读篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codertian.com/2017/02/04/iOS-Moya-RxSwift-better-networking/#more&quot;&gt;【iOS开发】使用RxSwift+Moya进行优雅的网络请求&lt;/a&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Swift-技能小结(一)</title>
        <link>http://localhost:4000/2017/02/22/Swift-%E6%8A%80%E8%83%BD%E5%B0%8F%E7%BB%93(%E4%B8%80).html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/22/Swift-%E6%8A%80%E8%83%BD%E5%B0%8F%E7%BB%93(%E4%B8%80).html</guid>
        <pubDate>Wed, 22 Feb 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-de182ce415c302a3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;最近写代码处于很尴尬的状态, 某些简单的语法或者是小功能明明写过很多遍, 却总是不能手到擒来; 总是需要翻看以前的代码… 
|
|
面壁五分钟……..
|
|
|
|
|
|
|
|
好了, 开始写代码, 做个小结.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;1-swift中的遍历-for-in&quot;&gt;1. swift中的遍历 &lt;strong&gt;&lt;em&gt;for-in&lt;/em&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;: 用来按照指定的次数多次执行一系列语句
Swift中已经不支持C样式的&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;了, 只能使用&lt;code class=&quot;highlighter-rouge&quot;&gt;for-in&lt;/code&gt;遍历&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;for-in&lt;/code&gt;遍历, 如果需要下标(&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;), 怎么办?
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let array = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]
      for (index, entry) in array.enumerated() {
          print(&quot;entry: \(entry)---&amp;gt;index = \(index)&quot;)
      }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;结果如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;entry: a---&amp;gt;index = 0
entry: b---&amp;gt;index = 1
entry: c---&amp;gt;index = 2
entry: d---&amp;gt;index = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;需要倒序遍历, 应该怎么办?
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let array = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]
      for entry in array.reversed() {
          print(&quot;entry: \(entry)&quot;)
      }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;结果如下:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;entry: 4
entry: 3
entry: 2
entry: 1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-swift中的-range-使用&quot;&gt;2. Swift中的 &lt;strong&gt;&lt;em&gt;Range&lt;/em&gt;&lt;/strong&gt; 使用&lt;/h1&gt;
&lt;blockquote&gt;

  &lt;p&gt;当我们截取字符串的时候, 往往需要使用到&lt;code class=&quot;highlighter-rouge&quot;&gt;Range&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Range&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRange&lt;/code&gt;有着很大的不同; 当我们操作字符串时&lt;code class=&quot;highlighter-rouge&quot;&gt;Range&lt;/code&gt;的参数类型需要是&lt;code class=&quot;highlighter-rouge&quot;&gt;String.index&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例: 我们把一个手机号的中间四位替换为*&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var phoneNum = &quot;13356787890&quot;
phoneNum.replaceSubrange(Range(phoneNum.index(phoneNum.startIndex, offsetBy: 3)..&amp;lt;phoneNum.index(phoneNum.startIndex, offsetBy: 7)), with: &quot;****&quot;)
print(&quot;\(phoneNum)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;结果如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;133****7890
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;3-判断两个对象是否为同一个对象&quot;&gt;3. 判断两个对象是否为同一个对象&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;恒等运算符&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;等价于 (&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;)&lt;/li&gt;
    &lt;li&gt;不等价于 (&lt;code class=&quot;highlighter-rouge&quot;&gt;!==&lt;/code&gt;)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;在Swift中:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;类是引用类型(有可能多个常量或变量同时引用同一个类实例);&lt;/li&gt;
  &lt;li&gt;枚举和结构体是值类型(在被赋值到常量, 变量或者传递到函数时, 其值总是会被拷贝);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以当我们判断两个类的实例是否是同一个实例时, 需要使用恒等运算符.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let person1 = Person()
let person2 = person1
        
if person1 === person2 {
    print(&quot;person1:\(person1) === person2:\(person2)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果如下:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;person1:Demo.Person === person2:Demo.Person
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;4-设置中文文字为斜体&quot;&gt;4. 设置中文文字为斜体&lt;/h1&gt;
&lt;blockquote&gt;

  &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;__CGAffineTransformMake(1, 0, CGFloat(tanf(-35.0 * Float(M_PI / 180.0))), 1, 0, 0)&lt;/code&gt; 设置中文斜体&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let button = UIButton()
button.setTitle(&quot;设置按钮&quot;, for: .normal)
button.setTitleColor(UIColor.blue, for: .normal)
button.sizeToFit()
button.center = view.center
view.addSubview(button)
let matrix = __CGAffineTransformMake(1, 0, CGFloat(tanf(-35.0 * Float(M_PI / 180.0))), 1, 0, 0)
button.titleLabel?.transform = matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;效果如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-b5345d0596ec53d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;matrix.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;5-题外话&quot;&gt;5. 题外话&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;先总结这么几个, 慢慢积累吧
下一篇: &lt;a href=&quot;http://www.jianshu.com/p/843f476f3c88&quot;&gt;Swift-技能小结(二)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>高阶函数---swift中的泛型介绍(一步步实现Map函数)</title>
        <link>http://localhost:4000/2017/02/14/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-swift%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E4%BB%8B%E7%BB%8D(%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0Map%E5%87%BD%E6%95%B0).html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/14/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-swift%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E4%BB%8B%E7%BB%8D(%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0Map%E5%87%BD%E6%95%B0).html</guid>
        <pubDate>Tue, 14 Feb 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-2d9c01962d77399b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;本文内容均出自&lt;a href=&quot;https://store.objccn.io/products/functional-swift/&quot;&gt;函数式 Swift&lt;/a&gt;一书, 此处整理仅仅是为了自己日后方便查看, 需要深入研究的话, 可以点进去购买, 支持&lt;a href=&quot;https://store.objccn.io/products/functional-swift/&quot;&gt;原作者&lt;/a&gt;
本书由 &lt;a href=&quot;http://weibo.com/onevcat?is_hot=1&quot;&gt;王巍–新浪微博&lt;/a&gt;大神翻译
&lt;a href=&quot;https://onevcat.com/#blog&quot;&gt;OneV’s Den 喵神博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;接受其它函数作为参数的函数有时被称为&lt;strong&gt;&lt;em&gt;高阶函数&lt;/em&gt;&lt;/strong&gt;. 本篇中, 将在一些来自Swift标准库中作用于数组的高阶函数中漫游. 伴随这个过程, 我们将介绍Swift的&lt;strong&gt;&lt;em&gt;泛型&lt;/em&gt;&lt;/strong&gt;, 以及展示如何将复杂计算运用于数组中.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;泛型介绍&quot;&gt;泛型介绍&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;假如我们需要写一个函数, 它接受一个给定的整型数组, 通过计算得到并返回一个新数组, 新数组各项为原数组中对应的整型数据加一. 这一切, 仅仅只需要使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;就能非常容易地实现:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func incrementArray(xs: [Int]) -&amp;gt; [Int] {
        var result: [Int] = []
        for x in xs {
            result.append(x + 1)
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在假设我们还需要一个函数, 用于生成一个每项都为参数数组对应项两倍的数组. 这同样能很容易地使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;来实现:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func doubleArray(xs: [Int]) -&amp;gt; [Int] {
        var result: [Int] = []
        for x in xs {
            result.append(x * 2)
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这两个函数有大量相同的代码, 我们能不能将没有区别的地方抽象出来, 并单独写一个体现这种模式且更通用的函数呢? 像这样的函数需要追加一个新参数来接受一个函数, 这个参数能根据各个数组项计算得到新的整型数值:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func computeIntArray(xs: [Int], transform: ((Int) -&amp;gt; Int) ) -&amp;gt; [Int] {
        var result: [Int] = []
        for x in xs {
            result.append(transform(x))
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在, 取决于我们想如何根据原数组得到一个新数组, 我们可以向函数传递不同的参数. &lt;code class=&quot;highlighter-rouge&quot;&gt;doubleArray函数&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;incrementArray函数&lt;/code&gt; 都精简为了一行调用 computeInArray的语句:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func doubleArrany2(xs: [Int]) -&amp;gt; [Int] {
        return computeIntArray(xs: xs, transform: { (x) -&amp;gt; Int in
            x * 2
        })
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;代码仍然不像想象中的那么灵活. 假设我们想要得到一个布尔型的新数组, 用于表示原数组中对应的数字是否是偶数. 我们可能会尝试编写一些像下面这样的代码:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func isEvenArray(xs: [Int]) -&amp;gt; [Bool] {
        computeIntArray(xs: xs) { (x) -&amp;gt; Int in
            x % 2 == 0
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;不幸的是, 这段代码导致了一个类型错误. 问题在于, 我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;computeIntArray函数&lt;/code&gt;接受一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Int -&amp;gt; Int&lt;/code&gt; 类型的参数, 也就是说, 该参数是一个返回整型值的函数. 而在&lt;code class=&quot;highlighter-rouge&quot;&gt;isEvenArray&lt;/code&gt;函数的定义中, 我们传递了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int -&amp;gt; Bool&lt;/code&gt;类型的参数, 于是导致了类型错误.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-f1809c26ee8b36fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;类型错误&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们应该如何解决这个问题呢? 一种&lt;strong&gt;&lt;em&gt;可行&lt;/em&gt;&lt;/strong&gt;的方案是定义新版本的&lt;code class=&quot;highlighter-rouge&quot;&gt;computeIntArray函数&lt;/code&gt;, 接受一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int -&amp;gt; Bool&lt;/code&gt; 类型的函数作为参数. 类似下面这样:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func computeBoolArray(xs: [Int], transform2: (Int) -&amp;gt; Bool) -&amp;gt; [Bool] {
        var result: [Bool] = []
        for x in xs {
            result.append(transform2(x))
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;但是, 这个方案的扩展性并不好. 如果接下来需要计算&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型呢? 我们是否还需要定义一个高阶函数来接受 &lt;code class=&quot;highlighter-rouge&quot;&gt;Int -&amp;gt; String&lt;/code&gt;类型的参数?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;幸运的是, 该问题有一个解决方案: 我们可以使用_泛型_. &lt;code class=&quot;highlighter-rouge&quot;&gt;computeBoolArray&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;computeIntArray&lt;/code&gt; 的定义是相同的; 唯一的区别在于&lt;strong&gt;&lt;em&gt;类型签名(type signature)&lt;/em&gt;&lt;/strong&gt;. 假如我们定义一个相似的函数&lt;code class=&quot;highlighter-rouge&quot;&gt;computeStringArray&lt;/code&gt; 来支持&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型, 其函数体将会与先前两个函数完全一致. 事实上, 相同部分的代码可以用于&lt;strong&gt;&lt;em&gt;任何&lt;/em&gt;&lt;/strong&gt;类型. 我们正真想做的是写一个能够使用于每种可能类型的泛型函数:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func genericComputeArray1&amp;lt;T&amp;gt;(xs: [Int], transform: (Int) -&amp;gt; T) -&amp;gt; [T] {
        var result: [T] = []
        for x in xs {
            result.append(transform(x))
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于这段代码, 最有意思的是它的类型签名. 理解这个类型签名有助于你将&lt;code class=&quot;highlighter-rouge&quot;&gt;genericComputeArray1&amp;lt;T&amp;gt;&lt;/code&gt;理解为一个函数族. &lt;strong&gt;&lt;em&gt;类型&lt;/em&gt;&lt;/strong&gt;参数T的每个选择都会确定一个新函数. 该函数接受一个整型数组和一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int -&amp;gt; T&lt;/code&gt;类型的函数作为参数, 并返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;[T]&lt;/code&gt;类型的数组.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们仍能进一步将这个函数一般化. 没有理由让它仅能对类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;[Int]&lt;/code&gt;的输入数组进行处理. 将数组类型进行抽象, 能得到下面这样的类型签名:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func map&amp;lt;Element, T&amp;gt;(xs: [Element], transform: (Element) -&amp;gt; T) -&amp;gt; [T] {
        var result: [T] = []
        for element in xs {
            result.append(transform(element))
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里我们写了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;map函数&lt;/code&gt;, 它在两个维度都是通用的: 对于任何&lt;code class=&quot;highlighter-rouge&quot;&gt;Element&lt;/code&gt;的数组和 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform: Element -&amp;gt; T&lt;/code&gt; 函数, 它都会生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;的新数组. 这个&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;函数甚至比我们之前看到的&lt;code class=&quot;highlighter-rouge&quot;&gt;genericComputeArray函数&lt;/code&gt;更通用. 事实上, 我们可以通过map来定义&lt;code class=&quot;highlighter-rouge&quot;&gt;genericComputeArray&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func genericComputeArray&amp;lt;T&amp;gt;(xs: [Int], transform: (Int) -&amp;gt; T) -&amp;gt; [T] {
        return map(xs: xs, transform: transform)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;同样的, 上述函数的定义并没有什么太过特别之处: 函数接受&lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;两个参数之后, 将他们传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;函数, 然后返回结果. 关于这个定义, 最有意思非类型莫属. &lt;code class=&quot;highlighter-rouge&quot;&gt;genericComputeArray&amp;lt;T&amp;gt;(xs: [Int], transform: (Int) -&amp;gt; T) -&amp;gt; [T] &lt;/code&gt;是 &lt;code class=&quot;highlighter-rouge&quot;&gt;map函数&lt;/code&gt;的一个实例, 只是它有一个更具体的类型.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;实际上, 比起定义一个顶层&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;函数, 按照&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;的惯例将&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;定义为&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;的扩展更合适:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Array {
    func map&amp;lt;T&amp;gt;(transform: (Element) -&amp;gt; T) -&amp;gt; [T] {
        var result: [T] = []
        for x in self {
            result.append(transform(x))
        }
        return result
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;我们子啊函数的&lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt;参数中所使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;Element&lt;/code&gt;类型源自于&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;中对&lt;code class=&quot;highlighter-rouge&quot;&gt;Element&lt;/code&gt;所进行的泛型定义.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;作为&lt;code class=&quot;highlighter-rouge&quot;&gt;map(xs, transform)&lt;/code&gt;的替代, 我们现在可以通过xs.map(transform)来调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;函数:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func genericComputeArray&amp;lt;T&amp;gt;(xs: [Int], transform: (Int) -&amp;gt; T) -&amp;gt; [T] {
        return xs.map(transform: transform)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;其实我们并不需要自己定义像这样的map函数, 因为它已经是&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;标准库的一部分了(基于&lt;code class=&quot;highlighter-rouge&quot;&gt;SequenceType&lt;/code&gt;协议被定义)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;顶层函数-和-类型扩展&quot;&gt;顶层函数 和 类型扩展&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;你可能已经注意到, 在本节的函数中我们使用了两种不同的方式来声明函数: 顶层函数和类型扩展. 在一开始创建&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;函数的过程中, 为了简单起见, 我们选择了顶层函数的版本作为例子进行展示. 不过, 最终我们将&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;的泛型版本定义为&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;的扩展, 这与它在&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;标准库中的实现方式十分相似.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;标准库最初的版本中, 顶层函数仍然是无处不在的, 但伴随&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift2.0&lt;/code&gt;的诞生, 这种模式被彻底从标准库中移除了. 随着&lt;code class=&quot;highlighter-rouge&quot;&gt;协议扩展(protocol extension)&lt;/code&gt;, 当前第三方开发者有了一个强有力的工具来定义他们自己的扩展–现在我们不仅仅可以再&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;这样的具体类型上进行定义, 还可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;Sequence Type&lt;/code&gt;一样的协议上来定义扩展.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;我们建议遵循此规则, 并把处理确定类型的函数定义为该类型的扩展 . 这样做的优点是自动补齐更完善, 暧昧的命名更少, 以及(通常)代码结构更清晰.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;下一篇&quot;&gt;下一篇&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a0762d30dda8&quot;&gt;高阶函数—swift中的Filter 和 Reduce&lt;/a&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>高阶函数---swift中的Filter 和 Reduce</title>
        <link>http://localhost:4000/2017/02/14/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-swift%E4%B8%AD%E7%9A%84Filter-%E5%92%8C-Reduce.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/14/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-swift%E4%B8%AD%E7%9A%84Filter-%E5%92%8C-Reduce.html</guid>
        <pubDate>Tue, 14 Feb 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-0bc34a563338d07e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;本文内容均出自&lt;a href=&quot;https://store.objccn.io/products/functional-swift/&quot;&gt;函数式 Swift&lt;/a&gt;一书, 此处整理仅仅是为了自己日后方便查看, 需要深入研究的话, 可以点进去购买, 支持&lt;a href=&quot;https://store.objccn.io/products/functional-swift/&quot;&gt;原作者&lt;/a&gt;
本书由 &lt;a href=&quot;http://weibo.com/onevcat?is_hot=1&quot;&gt;王巍–新浪微博&lt;/a&gt;大神翻译
&lt;a href=&quot;https://onevcat.com/#blog&quot;&gt;OneV’s Den 喵神博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;上一篇写到了&lt;a href=&quot;http://www.jianshu.com/p/b7d2adcedb14&quot;&gt;高阶函数—Swift中的泛型介绍(一步步实现map函数)&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;map函数&lt;/code&gt;并不是Swift标准数组库中唯一一个使用泛型的函数. 趁着今天有时间, 把&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Reduce&lt;/code&gt;也整理一下, 方便日后查阅.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;filter&quot;&gt;Filter&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;假设我们有一个由字符串组成的数组, 代表文件夹的内容:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let exampleFiles = [&quot;README.md&quot;, &quot;HelloWorld.swift&quot;, &quot;FlappyBird.swift&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在如果我们想要一个包含所有&lt;code class=&quot;highlighter-rouge&quot;&gt;.swift&lt;/code&gt;文件的数组, 可以很容易通过简单的循环得到:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func getSwiftFiles(_ files: [String]) -&amp;gt; [String] {
        var result: [String] = []
        for file in files {
            if file.hasSuffix(&quot;.swift&quot;) {
                result.append(file)
            }
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在可以使用这个函数来取得&lt;code class=&quot;highlighter-rouge&quot;&gt;exampleFiles&lt;/code&gt;数组中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(&quot;\(getSwiftFiles(exampleFiles))&quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-ad28945db49f5cbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;获取数组中的Swift文件&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当然, 我们可以将&lt;code class=&quot;highlighter-rouge&quot;&gt;getSwiftFiles&lt;/code&gt;函数一般化. 比如, 相比于使用硬编码(hardcoding)的方式筛选扩展名为&lt;code class=&quot;highlighter-rouge&quot;&gt;.swift&lt;/code&gt;的文件, 传递一个附加的&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;参数进行比对会是更好的方法. 我们接下来可以使用同样的函数去比对&lt;code class=&quot;highlighter-rouge&quot;&gt;.swift&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;文件. 但是假如我们想查找没有扩展名的所有文件, 或者是名字以字符串&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;开头的文件, 那怎么办呢?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;为了进行一个这样的查找, 我们可以定义一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;的通用型函数. 就像之前看到的&lt;a href=&quot;http://www.jianshu.com/p/b7d2adcedb14&quot;&gt;map&lt;/a&gt;那样, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;函数接受一个&lt;strong&gt;&lt;em&gt;函数&lt;/em&gt;&lt;/strong&gt;作为参数. &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;函数的类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;Element -&amp;gt; Bool&lt;/code&gt; ——对于数组中的所有元素, 此函数都会判定它是否应该被包含在结果中:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Array {
    func filter(includeElement: (Element) -&amp;gt; Bool) -&amp;gt; [Element] {
        var result: [Element] = []
        for x in self where includeElement(x) {
            result.append(x)
        }
        return result
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 能很容易地定义&lt;code class=&quot;highlighter-rouge&quot;&gt;getSwiftFiles&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func getSwiftFiles(_ files: [String]) -&amp;gt; [String] {
        return files.filter(includeElement: { (file) -&amp;gt; Bool in
            file.hasSuffix(&quot;.swift&quot;)
        })
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;就像&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;一样, &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;标准库中的数组类型已经有定义好的&lt;code class=&quot;highlighter-rouge&quot;&gt;filter函数&lt;/code&gt;了. 所以除非是作为练习, 否则并没有必要重写它.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;reduce&quot;&gt;Reduce&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;在定义一个泛型函数来体现一个更常见的模式之前, 我们会先考虑一些相对简单的函数.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;定义一个计算数组中所有整型值之和的函数非常简单:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func sum(_ xs: [Int]) -&amp;gt; Int {
        var result: Int = 0
        for x in xs {
            result += x
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们可以向下面这样使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sum函数&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(sum([1, 2, 3, 4]))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-bcbb4dd871eafc4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;sum结果&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们也可以使用类似&lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;来定义一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;product函数&lt;/code&gt;, 用于计算所有数组项相乘之积:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func product(_ xs: [Int]) -&amp;gt; Int {
        var result: Int = 1
        for x in xs {
            result = x * result
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;同样地, 我们可能想要连接数组中的所有字符串:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func concatenate(_ xs: [String]) -&amp;gt; String {
        var result: String = &quot;&quot;
        for x in xs {
            result += x
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;或者说, 我们可以选择连接数组中的所有字符串, 并插入一个单独的首行, 以及在每一项后面追加一个换行符:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func prettyPrintArray(_ xs: [String]) -&amp;gt; String {
        var result: String = &quot;&quot;
        for x in xs {
            result = &quot; &quot; + result + x + &quot;\n&quot;
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这些函数有什么共同特点呢? 他们都将变量&lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;初始化为某个值. 随后对输入数组  &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt; 的每一项进行遍历, 最后以某种方式更新结果. 为了定义一个可以体现所需类型的泛型函数, 我们需要对两份信息进行抽象: 赋给 &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;变量的初始值, 和用于在每一次循环中更新&lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;的&lt;strong&gt;&lt;em&gt;函数&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;考虑到这一点, 我们得出了能够匹配此模式的&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce函数&lt;/code&gt;定义, 如下所示:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Array {
    func reduce&amp;lt;T&amp;gt;(initial: T, combine: (T, Element) -&amp;gt; T) -&amp;gt; T {
        var result = initial
        for x in self {
            result = combine(result, x)
        }
        return result
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个函数的泛型类型体现在两个方面: 对于任意的&lt;code class=&quot;highlighter-rouge&quot;&gt;[Element]&lt;/code&gt;类型的&lt;strong&gt;&lt;em&gt;输入数组&lt;/em&gt;&lt;/strong&gt;来说, 它会计算一个类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;的返回值. 这么做的前提是, 首先需要一个&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;类型的初始值(赋值给&lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;变量), 以及一个用于更新&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;中变量值的函数&lt;code class=&quot;highlighter-rouge&quot;&gt;combine:(T, Element) -&amp;gt; T&lt;/code&gt;. 在一些想&lt;code class=&quot;highlighter-rouge&quot;&gt;OCaml&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Haskell&lt;/code&gt;一样的函数式语言中, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;函数被称为&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;fold_left&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;来定义以上函数. 下面是几个例子:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func sumUsingReduce(_ xs: [Int]) -&amp;gt; Int {
        return xs.reduce(0) { (result, x) -&amp;gt; Int in
            return result + x
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了写一个闭包, 我们也可以将运算符作为最后一个参数. 这使得代码更短, 如下面两个函数所示:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func productUsingReduce(_ xs: [Int]) -&amp;gt; Int {
        return xs.reduce(initial: 1, combine: *)
    }
    
    func concatUsingReduce(_ xs: [String]) -&amp;gt; String {
        return xs.reduce(initial: &quot;&quot;, combine: +)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要再一次说明, 我们自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;仅仅只是为了练习. &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;的标准库已经为数组提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce函数&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; 来定义新的泛型函数. 例如, 假设有一个数组, 它的每一项都是数组, 而我们想将他展开为一个单一数组. 可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;编写一个函数:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func flatten&amp;lt;T&amp;gt;(_ xss: [[T]]) -&amp;gt; [T] {
        var result: [T] = []
        for xs in xss {
            result += xs
        }
        return result
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;然而, 若使用&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;则可以想下面这样编写这个函数:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func flattenUsingReduce&amp;lt;T&amp;gt;(_ xss: [[T]]) -&amp;gt; [T] {
        return xss.reduce(initial: [], combine: { (result, xs) -&amp;gt; [T] in
            return result + xs
        })
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;实际上, 我们甚至可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;重新定义&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func mapUsingReduce&amp;lt;T&amp;gt;(_ transform: (Element) -&amp;gt; T) -&amp;gt; [T] {
        return reduce(initial: [], combine: { (result, x) -&amp;gt; [T] in
            return result + [transform(x)]
        })
    }
    
    func flterUsingReduce(_ includeElement:(Element) -&amp;gt; Bool) -&amp;gt; [Element] {
        return reduce(initial: [], combine: { (result, x) -&amp;gt; [Element] in
            return includeElement(x) ? result + [x] : result
        })
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们能够使用&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;来表示所有这些函数, 这个事实说明了&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;能够通过通用的方法来体现一个相当常见的编程模式: 遍历数组并计算结果.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;请务必注意: 尽管通过&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;来定义一切是个很有趣的练习, 但是在实践中者往往不是一个什么好主意. 原因在于, 不出意外的话你的代码最终会在运行期间大量复制生成的数组, 换句话说, 它不得不反复分配内存, 释放内存, 以及复制大量内存中的内容.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>iOS---当编辑密码输入框时, 会自动清空文本框问题解决方案</title>
        <link>http://localhost:4000/2017/02/13/iOS-%E5%BD%93%E7%BC%96%E8%BE%91%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%A1%86%E6%97%B6,-%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%B8%85%E7%A9%BA%E6%96%87%E6%9C%AC%E6%A1%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/13/iOS-%E5%BD%93%E7%BC%96%E8%BE%91%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%A1%86%E6%97%B6,-%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%B8%85%E7%A9%BA%E6%96%87%E6%9C%AC%E6%A1%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</guid>
        <pubDate>Mon, 13 Feb 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-52de6b4f3b32beea.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;isSecureTextEntry&lt;/code&gt; 属性为 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 时, 我们如果编辑 &lt;code class=&quot;highlighter-rouge&quot;&gt;textField&lt;/code&gt; 时, 系统会自动清空 &lt;code class=&quot;highlighter-rouge&quot;&gt;textField&lt;/code&gt; 上的文本重新输入, 而不是在之前的文本后继续输入.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;问题演示如下图&quot;&gt;问题演示如下图&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;当输入密码时, 系统会自动清空以前的内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-24d139bfdac4cc75.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;自动清空密码输入框.gif&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;需求&quot;&gt;需求&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;在项目中的需求是, 可以再之前的密码后面继续追加字符
例如: 密码是  yq123
密码输入框, 先输入了: yq, 点击完成后;
再次点击密码输入框, 在之前的yq 后面追加:123&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;解决问题&quot;&gt;解决问题&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; 的代理方法 &lt;code class=&quot;highlighter-rouge&quot;&gt;func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&amp;gt; Bool&lt;/code&gt; 中添加如下代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&amp;gt; Bool {
        let textFieldContent = ((textField.text ?? &quot;&quot;) as NSString).replacingCharacters(in: range, with: string)
        if textField == password, textField.isSecureTextEntry == true {
            textField.text = textFieldContent
            return false
        }
        return true
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;解决后的效果&quot;&gt;解决后的效果&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-8942850584cce2a6.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;解决后的效果.gif&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
        <link>http://localhost:4000/2017/02/09/REMOTE-HOST-IDENTIFICATION-HAS-CHANGED.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/09/REMOTE-HOST-IDENTIFICATION-HAS-CHANGED.html</guid>
        <pubDate>Thu, 09 Feb 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-5fbde0a2f0be8d7d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更新时间: 2017-02-10 
今天又出现了相同的问题, 检查发现是服务器的问题, 重启服务器就好了(大写加粗的囧字,尴尬五分钟)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-814055a93083f569.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;尴尬...&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;问题&quot;&gt;问题&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;今天使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;更新本地服务器的代码时, 出现了如下错误, 此处记录一下解决方法 和用到的几条终端命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Air:operation4ios sungrow$ git pull
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
SHA256:8lUkY9ticgAJrMjZIS8nD/PhJgJY2PGYYZr3kFWrTr4.
Please contact your system administrator.
Add correct host key in /Users/sungrow/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /Users/sungrow/.ssh/known_hosts:9
RSA host key for 192.168.64.216 has changed and you have requested strict checking.
Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;解决步骤&quot;&gt;解决步骤&lt;/h1&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;1-重启服务器&quot;&gt;1. 重启服务器&lt;/h3&gt;
&lt;h3 id=&quot;2-使用ssh-keygen--l--f-sshknown_hosts-命令查看known_hosts里的所有认证信息&quot;&gt;2. 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -l -f ~/.ssh/known_hosts&lt;/code&gt; 命令查看&lt;code class=&quot;highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt;里的所有认证信息&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Air:operation4ios sungrow$ ssh-keygen -l -f ~/.ssh/known_hosts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2048 SHA256:Ozg57nLbtZoA89n/N95+1iwJpyDgehOYtHrVIQVF4MY s1.cyssh.com,103.6.85.132 (RSA)
256 SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc git.oschina.net,218.60.114.30 (ECDSA)
256 SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc 218.11.0.86 (ECDSA)
2048 SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8 github.com,192.30.253.113 (RSA)
256 SHA256:qfBHoh4vTfFHbgaD3BQf/ZwO6BPfUdBLLzIJTXW2QcY 192.168.64.160 (ECDSA)
256 SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc 116.211.167.14 (ECDSA)
2048 SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8 192.30.253.112 (RSA)
256 SHA256:qfBHoh4vTfFHbgaD3BQf/ZwO6BPfUdBLLzIJTXW2QcY 192.168.64.59 (ECDSA)
256 SHA256:qfBHoh4vTfFHbgaD3BQf/ZwO6BPfUdBLLzIJTXW2QcY 192.168.64.216 (ECDSA)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3-使用vim编辑器vim-sshknown_hosts-找到和当前ip地址相同的信息然后删掉&quot;&gt;3. 使用vim编辑器&lt;code class=&quot;highlighter-rouge&quot;&gt;vim ~/.ssh/known_hosts&lt;/code&gt;, 找到和当前IP地址相同的信息然后删掉&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Air:operation4ios sungrow$ vim ~/.ssh/known_hosts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;192.168.64.160 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL2myNoDAkyW0aeTsCJmkHPn2bV3MHfiD8xfOpCkQtomE43zbENYDLFCallpPNXr3cHHUekoCkvFpueqwfbY6Ro=
116.211.167.14 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMuEoYdx6to5oxR60IWj8uoe1aI0X1fKOHWOtLqTg1tsLT1iFwXV5JmFjU46EzeMBV/6EmI1uaRI6HiEPtPtJHE=
192.168.64.216 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL2myNoDAkyW0aeTsCJmkHPn2bV3MHfiD8xfOpCkQtomE43zbENYDLFCallpPNXr3cHHUekoCkvFpueqwfbY6Ro=
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;4-使用ssh-keygen--r-服务器ip地址命令重新连接&quot;&gt;4. 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -R 服务器IP地址&lt;/code&gt;命令重新连接&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Air:operation4ios sungrow$ ssh-keygen -R 192.168.64.216&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Host 192.168.64.216 found: line 9
/Users/sungrow/.ssh/known_hosts updated.
Original contents retained as /Users/sungrow/.ssh/known_hosts.old
Air:operation4ios sungrow$ vim ~/.ssh/known_hosts
Air:operation4ios sungrow$ ssh-keygen -R 192.168.64.216
Host 192.168.64.216 not found in /Users/sungrow/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;5-此时可以正常使用git命令&quot;&gt;5. 此时可以正常使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;命令&lt;/h3&gt;
&lt;blockquote&gt;

  &lt;p&gt;例: 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;命令, 更新代码
Air:operation4ios sungrow$ git pull
依次输入yes 和服务器密码后, 一切又都可以正常使用了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The authenticity of host '192.168.64.216 (192.168.64.216)' can't be established.
ECDSA key fingerprint is SHA256:qfBHoh4vTfFHbgaD3BQf/ZwO6BPfUdBLLzIJTXW2QcY.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.64.216' (ECDSA) to the list of known hosts.
Password:
Already up-to-date.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;论终端使用的熟练程度, 我只服我们老大,   哈哈哈~~~
简直是出神入化, 6到飞起  ———–来自一位菜鸟程序员的感慨
🖥
 ⌨️ 🖱&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>UISearchBar 闪现背景色解决方案</title>
        <link>http://localhost:4000/2017/01/22/UISearchBar-%E9%97%AA%E7%8E%B0%E8%83%8C%E6%99%AF%E8%89%B2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/22/UISearchBar-%E9%97%AA%E7%8E%B0%E8%83%8C%E6%99%AF%E8%89%B2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</guid>
        <pubDate>Sun, 22 Jan 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-faa3dce2c0655b66.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;此处记录项目中的一个bug解决方案, 希望可以帮助遇到相同问题的小伙伴.
UISearchBar 放在导航栏, 当pop控制器时, searchBar会闪现背景色.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;bug-演示&quot;&gt;bug 演示&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-45522a8ea53395f1.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;searchBar 闪现背景色bug演示.gif&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;寻找bug&quot;&gt;寻找bug&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;UISearchbar 随着iOS的版本升级也在不断的发生着变化
我们可以使用UIView的&lt;code class=&quot;highlighter-rouge&quot;&gt;recursiveDescription&lt;/code&gt;方法 查看searchBar的视图层次结构, 断点调试: &lt;code class=&quot;highlighter-rouge&quot;&gt;po [××× recursiveDescription]&lt;/code&gt;
此处测试版本: 模拟器 iOS10.2(14C89)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;调试结果&quot;&gt;调试结果&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(lldb) po [searchBar recursiveDescription]
&amp;lt;DopSearchBar: 0x7fd36ed89850; baseClass = UISearchBar; frame = (0 0; 0 0); text = ''; tintColor = UIExtendedGrayColorSpace 0 0; gestureRecognizers = &amp;lt;NSArray: 0x6080004551b0&amp;gt;; layer = &amp;lt;CALayer: 0x60800063b7a0&amp;gt;&amp;gt;
   | &amp;lt;UIView: 0x7fd36efb1b90; frame = (0 0; 0 0); clipsToBounds = YES; autoresize = W+H; layer = &amp;lt;CALayer: 0x608000639cc0&amp;gt;&amp;gt;
   |    | &amp;lt;UISearchBarBackground: 0x7fd36ee2fce0; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = &amp;lt;CALayer: 0x60000042e040&amp;gt;&amp;gt; - (null)
   |    | &amp;lt;UISearchBarTextField: 0x7fd36ed8e950; frame = (0 0; 0 0); text = ''; opaque = NO; tintColor = UIExtendedSRGBColorSpace 0.215686 0.709804 0.988235 1; layer = &amp;lt;CALayer: 0x60000042bec0&amp;gt;&amp;gt;
   |    |    | &amp;lt;UITextFieldBorderView: 0x7fd36ec48520; frame = (0 0; 0 0); clipsToBounds = YES; opaque = NO; layer = &amp;lt;CALayer: 0x60000042e1e0&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ps: DopSearchBar 是子类化的searchBar&lt;/p&gt;

&lt;p&gt;searchBar 层级结构如下图
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-2f4971d7c65b294f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;searchBar 层次结构.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;修复bug&quot;&gt;修复bug&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;我们只需要移除 &lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchBarBackground&lt;/code&gt;即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;代码如下, 代码中的&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;为子类化的&lt;code class=&quot;highlighter-rouge&quot;&gt;searchBar&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (UIView *subV in self.subviews) {
        if (subV.subviews.count &amp;gt; 0 &amp;amp;&amp;amp; [subV.subviews.firstObject isKindOfClass:NSClassFromString(@&quot;UISearchBarBackground&quot;)]) {
            [subV.subviews.firstObject removeFromSuperview];
            break;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;修复bug后的效果&quot;&gt;修复bug后的效果&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-7bb150add2ceafdd.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;fix bug.gif&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;参考文章&quot;&gt;参考文章&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/forestml2008/article/details/32914915&quot;&gt;UISearchbar去除背景色的方法，适合iOS5/6/7/8.0beta&lt;/a&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>iOS同步调用对话框 RunLoop的使用</title>
        <link>http://localhost:4000/2017/01/19/iOS%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8%E5%AF%B9%E8%AF%9D%E6%A1%86-RunLoop%E7%9A%84%E4%BD%BF%E7%94%A8.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/19/iOS%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8%E5%AF%B9%E8%AF%9D%E6%A1%86-RunLoop%E7%9A%84%E4%BD%BF%E7%94%A8.html</guid>
        <pubDate>Thu, 19 Jan 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-600ace94ea6c8576.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;更新时间: 2017-04-19
此种方案设计的弹出框, 不适用于&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Cell&lt;/code&gt;点击代理方法中操作; 但是可以通过在&lt;code class=&quot;highlighter-rouge&quot;&gt;cell&lt;/code&gt;上增加&lt;code class=&quot;highlighter-rouge&quot;&gt;button&lt;/code&gt;, 利用&lt;code class=&quot;highlighter-rouge&quot;&gt;button&lt;/code&gt;的点击事件调用同步弹出框.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;问题&quot;&gt;问题&lt;/h1&gt;
&lt;blockquote&gt;

  &lt;p&gt;iOS中弹窗显示后, 代码会继续执行, 然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;获取用户操作结果;
但在开发中, 往往需要等待用户操作后再继续执行代码, 这时候我们可以借助&lt;code class=&quot;highlighter-rouge&quot;&gt;RunLoop&lt;/code&gt;实现弹出窗的同步调用.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;测试demo&quot;&gt;测试Demo&lt;/h1&gt;
&lt;blockquote&gt;

  &lt;p&gt;定义了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt;的变量–&lt;code class=&quot;highlighter-rouge&quot;&gt;isConfirm&lt;/code&gt;, 弹出对话框后, 打印&lt;code class=&quot;highlighter-rouge&quot;&gt;isConfirm&lt;/code&gt;的值, 在用户操作后更改&lt;code class=&quot;highlighter-rouge&quot;&gt;isConfirm&lt;/code&gt;的值, 查看打印结果和打印时机.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;测试结果-注意输出isconfirm的时机&quot;&gt;测试结果, 注意输出&lt;code class=&quot;highlighter-rouge&quot;&gt;isConfirm&lt;/code&gt;的时机&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-bd8490af18e17595.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;测试Demo.gif&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;代码&quot;&gt;代码&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
        let alertVC = UIAlertController(title: &quot;标题&quot;, message: &quot;测试同步的弹窗&quot;, preferredStyle: .alert)
        
        let cancel = UIAlertAction(title: &quot;取消&quot;, style: .cancel) { (action) in
            self.isConfirm = false
            CFRunLoopStop(CFRunLoopGetCurrent())
        }
        let confirm = UIAlertAction(title: &quot;确认&quot;, style: .default) { (action) in
            self.isConfirm = true
            CFRunLoopStop(CFRunLoopGetCurrent())
        }
        alertVC.addAction(cancel)
        alertVC.addAction(confirm)
        present(alertVC, animated: true, completion: nil)
        CFRunLoopRun()
        
        print(&quot;isConfirm---\(isConfirm)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;实现原理&quot;&gt;实现原理&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;在弹出对话框后手动启动RunLoop(&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFRunLoopRun()&lt;/code&gt;&lt;/em&gt;)
在用户操作后, 强行停止正在运行的RunLoop(&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFRunLoopStop(CFRunLoopGetCurrent())&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;写在最后&quot;&gt;写在最后&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-2b59305066e31d68.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
本人菜鸟一枚,欢迎大神前来指(tiao)教(xi), 带我&lt;del&gt;进坑&lt;/del&gt;入门&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>iOS-Swift函数式编程 Core Image 封装</title>
        <link>http://localhost:4000/2017/01/10/iOS-Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-Core-Image-%E5%B0%81%E8%A3%85.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/10/iOS-Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-Core-Image-%E5%B0%81%E8%A3%85.html</guid>
        <pubDate>Tue, 10 Jan 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-34afae9b84040147.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;本文内容均出自&lt;a href=&quot;https://store.objccn.io/products/functional-swift/&quot;&gt;函数式 Swift&lt;/a&gt;一书, 此处整理仅仅是为了自己日后方便查看, 需要深入研究的话, 可以点进去购买, 支持&lt;a href=&quot;https://store.objccn.io/products/functional-swift/&quot;&gt;原作者&lt;/a&gt;
本书由 &lt;a href=&quot;http://weibo.com/onevcat?is_hot=1&quot;&gt;王巍–新浪微博&lt;/a&gt;大神翻译
&lt;a href=&quot;https://onevcat.com/#blog&quot;&gt;OneV’s Den 个人博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;core-image-简介&quot;&gt;Core Image 简介&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Core Image&lt;/code&gt;是一个强大的图像处理框架, 但是它的API 略显笨拙.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Core Image&lt;/code&gt;的API是弱类型—-通过键值编码&lt;code class=&quot;highlighter-rouge&quot;&gt;KVC&lt;/code&gt;来配置图像滤镜&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;.
在使用参数的类型或名字时, 我们都使用字符串来进行表示, 这十分容易出错, 极有可能导致运行时错误. 
我们开发新的API 将会利用&lt;em&gt;类型&lt;/em&gt;来避免这些原因导致的运行时错误, 最终我们将得到一组类型安全且高度模块化的API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;滤镜类型&quot;&gt;滤镜类型&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CIFilter&lt;/code&gt; 是&lt;code class=&quot;highlighter-rouge&quot;&gt;Core Image&lt;/code&gt;中的核心类之一, 用于创建图像滤镜. 当实例化一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CIFilter&lt;/code&gt;对象时, 几乎总是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kCIInputImageKey&lt;/code&gt;键提供输入图像, 再通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kCIOutputImageKey&lt;/code&gt; 键取回处理后的图像, 取回的结果可以作为下一个滤镜的输入值.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们会尝试封装这些键值对的具体细节, 从而呈现给用户一个强类型的API. 我们将Filter定义为一个函数, 该函数接受一个图像作为参数,并返回一个新的图像&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typealias Filter = (CIImage) -&amp;gt; CIImage
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;构建滤镜&quot;&gt;构建滤镜&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;我们已经定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;类型, 接着就可以开始定义函数来构建特定的滤镜了.  这些函在接受特定滤镜所需要的参数之后, 构造并返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;类型的值, 他们的具体形态大概都是这样的:&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func myFilter(/* parameters */) -&amp;gt; Filter
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-模糊滤镜&quot;&gt;1. 模糊滤镜&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;高斯模糊滤镜–只需要模糊半径这一个参数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 高斯模糊滤镜
///
/// - Parameter radius: 模糊半径
/// - Returns: 新图像
func blur(radius: Double) -&amp;gt; Filter {
    return { image in
        let parameters = [
            kCIInputRadiusKey: radius,
            kCIInputImageKey: image
            ] as [String : Any]
        guard let filter = CIFilter(name: &quot;CIGaussianBlur&quot;, withInputParameters: parameters) else {fatalError()}
        guard let outputImage =  filter.outputImage else {fatalError()}
        return outputImage
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一切就是这么简单, &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt;函数返回一个新函数, 新函数接受一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CIImage&lt;/code&gt;类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;, 并返回一个新图像(&lt;code class=&quot;highlighter-rouge&quot;&gt;filter.outputImage&lt;/code&gt;), 因此blur函数满足我们之前定义的
&lt;code class=&quot;highlighter-rouge&quot;&gt;CIImage-&amp;gt;CIImage&lt;/code&gt;, 也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;类型.&lt;/p&gt;

&lt;h3 id=&quot;2-颜色层叠&quot;&gt;2. 颜色层叠&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;现在我们来定义一个能够在图像上覆盖纯色叠层的滤镜. Core Image默认不包含这样一个滤镜, 但是我们完全可以用已经存在的滤镜来组成它. 
我们将使用的两个基础组件: 颜色生成滤镜(&lt;code class=&quot;highlighter-rouge&quot;&gt;CIConstantColorGenerator&lt;/code&gt;) 和 图像覆盖合成滤镜(&lt;code class=&quot;highlighter-rouge&quot;&gt;CISourceOverCompositing&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;生成固定颜色的滤镜
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 生成固定颜色的滤镜
///
/// - Parameter color: 颜色
/// - Returns: 新图像
func colorGenerator(color: UIColor) -&amp;gt; Filter {
  return { _ in
        
      let c = CIColor(color: color)
      let parameters = [kCIInputColorKey: c]
      guard let filter = CIFilter(name: &quot;CIConstantColorGenerator&quot;, withInputParameters: parameters) else {fatalError()}
      guard let outputImage = filter.outputImage else {fatalError()}
      return outputImage
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;合成滤镜
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 合成滤镜
///
/// - Parameter overlay: 输出图像
/// - Returns: 新图像
func compositeSourceOver(overlay: CIImage) -&amp;gt; Filter {
  return { image in
      let parameters = [
          kCIInputBackgroundImageKey: image,
          kCIInputImageKey: overlay
      ]
      guard let filter = CIFilter(name: &quot;CISourceOverCompositing&quot;, withInputParameters: parameters) else {fatalError()}
      guard let outputImage = filter.outputImage else {fatalError()}
      let cropRect = image.extent
      return outputImage.cropping(to: cropRect)
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;通过两个滤镜来创建颜色叠层滤镜
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 颜色叠层滤镜
///
/// - Parameter color: 颜色
/// - Returns: 新图像
func colorOverlay(color: UIColor) -&amp;gt; Filter {
  return { image in
      let overlay = colorGenerator(color: color)(image)
      return compositeSourceOver(overlay: overlay)(image)
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;我们再次返回了一个接受图像作为参数的函数. &lt;code class=&quot;highlighter-rouge&quot;&gt;colorOverlay&lt;/code&gt;函数首先调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;colorGenerator&lt;/code&gt;滤镜, &lt;code class=&quot;highlighter-rouge&quot;&gt;colorGenerator&lt;/code&gt;滤镜需要一个&lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt;作为参数, 然后返回一个新的滤镜, 因此代码片段&lt;code class=&quot;highlighter-rouge&quot;&gt;colorGenerator(color: color)&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;类型. 而&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;类型本身就是一个从&lt;code class=&quot;highlighter-rouge&quot;&gt;CIImage&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;CIImage&lt;/code&gt;的函数; 因此我们可以向&lt;code class=&quot;highlighter-rouge&quot;&gt;colorGenerator(color: color)&lt;/code&gt;函数传递一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CIImage&lt;/code&gt;类型的参数, 最终我们能够得到一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CIImage&lt;/code&gt;类型的新叠层. 这就是我们在定义&lt;code class=&quot;highlighter-rouge&quot;&gt;Overlay&lt;/code&gt;过程中所发生的全部事情, 可大致概括为—-首先使用&lt;code class=&quot;highlighter-rouge&quot;&gt;colorGenerator&lt;/code&gt;函数创建一个滤镜, 接着向这个滤镜传递一个&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;参数来创建新图像. 与之类似, 返回值&lt;code class=&quot;highlighter-rouge&quot;&gt;compositeSourceOver(overlay: overlay)(image)&lt;/code&gt;由一个通过&lt;code class=&quot;highlighter-rouge&quot;&gt;compositeSourceOver(overlay: overlay)&lt;/code&gt;函数构建的滤镜和随即被作为参数的&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;组成.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3组合滤镜&quot;&gt;3.组合滤镜&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;到现在为止, 我们已经定义了模糊滤镜和颜色叠层滤镜, 可以把他们组合在一起使用: 首先将图像模糊, 然后再覆盖一层红色叠层.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;让我们载入一张图片试试看:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let imageView = UIImageView(frame: view.bounds)
 view.addSubview(imageView)
        
let url = URL(string: &quot;https://raw.githubusercontent.com/Alamofire/Alamofire/assets/alamofire.png&quot;)
let image = CIImage(contentsOf: url!)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在我们可以链式地将两个滤镜应用到载入的图像上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
 let blurImage = blur(radius: 10)(image!)
 let overlayColor = UIColor.red.withAlphaComponent(0.2)
 let overlayImage = colorOverlay(color: overlayColor)(blurImage!)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;4复合函数&quot;&gt;4.复合函数&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;当然我们可以将上面代码里的两个调用滤镜的表达式简单何为一体:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imageView.image = UIImage(ciImage: colorOverlay(color: UIColor.red.withAlphaComponent(0.4))(blur(radius: 5)(image!)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;然而, 由于括号错综复杂, 这些代码很快失去了可读性, 更好的解决方式是自定义一个运算符来组合滤镜. 为了定义该运算符, 首先我们要定义一个用于组合滤镜的函数:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 复合滤镜
///
/// - Parameters:
///   - filter1: 滤镜1
///   - filter2: 滤镜2
/// - Returns: 新图像
func composeFilters(filter1: @escaping Filter, filter2: @escaping Filter) -&amp;gt; Filter {
    return { image in
        filter2(filter1(image))
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;composeFilters&lt;/code&gt;函数接收两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;类型的参数, 并返回一个新定义的滤镜. 这个符合滤镜接受&lt;code class=&quot;highlighter-rouge&quot;&gt;CIImage&lt;/code&gt;类型的图像参数, 然后将该参数传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;filter1&lt;/code&gt;, 取得返回值之后再传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;filter2&lt;/code&gt;. 我们可以使用符合函数来定义符合滤镜, 像下面这样:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; imageView.image = UIImage(ciImage: composeFilters(filter1: colorOverlay(color: overlayColor), filter2: blur(radius: 5))(image!))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;为了让代码更具可读性, 我们可以再进一步, 为组合滤镜引入运算符. 诚然, 随意自定义运算符, 并不一定对提升代码可读性有帮助. 不过, 在图像处理库中, 滤镜的组合是一个反复被讨论的问题, 所以引入运算符极有意义:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 运算符重载: 中置      前置      后置
          infix    prefix   postfix
 组合赋值运算符: assignment
 自定义运算符:
        全局域使用 operator 关键字声明
 自定义中置运算符的优先级和结合性:
        结合性(associativity) 取值有: left right none
        优先级(precedence)  默认为100
Operator should no longer be declared with body; use a precedence group instead
 */
infix operator &amp;gt;&amp;gt;&amp;gt; : ComposeFilter
precedencegroup ComposeFilter {
    associativity: left             // 左结合
    higherThan: AdditionPrecedence  // 优先级高于加法类型
    lowerThan: MultiplicationPrecedence // 优先级低于减法类型
}
func &amp;gt;&amp;gt;&amp;gt; (filter1: @escaping Filter, filter2: @escaping Filter) -&amp;gt; Filter {
    return { image in
        filter2(filter1(image))
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;与之前使用&lt;code class=&quot;highlighter-rouge&quot;&gt;composeFilters&lt;/code&gt;的方法类似, 我们现在可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;运算符达到目的:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imageView.image = UIImage(ciImage: (blur(radius: 5) &amp;gt;&amp;gt;&amp;gt; colorOverlay(color: UIColor.blue.withAlphaComponent(0.4)))(image!))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;由于已经定义的运算符&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;是左结合(&lt;code class=&quot;highlighter-rouge&quot;&gt;associativity: left&lt;/code&gt;), 就像&lt;code class=&quot;highlighter-rouge&quot;&gt;Unix&lt;/code&gt;的管道一样, 滤镜将以从左到右的顺序被应用到图像上.&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift有着合适的语言特性来适配函数式的编程方法.
学习用函数式的方式思考并不容易. 它挑战了我们既有的熟练解决问题的方式.
神奇的Swift~~~😃&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>iOS-时区转换(Objective-C) NSTimeZone</title>
        <link>http://localhost:4000/2017/01/07/iOS-%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2(Objective-C)-NSTimeZone.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/07/iOS-%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2(Objective-C)-NSTimeZone.html</guid>
        <pubDate>Sat, 07 Jan 2017 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-7b2f4fc46bfd078e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;说明&quot;&gt;说明&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;虽然代码很烂, 但还是要记录下来😀
&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;中的时间类&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;中存储的时间，都是相对于&lt;code class=&quot;highlighter-rouge&quot;&gt;GMT&lt;/code&gt;的，我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;时，会根据App的时区设置返回与时区对应的数据
&lt;strong&gt;&lt;em&gt;所以统一处理成字符串&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;基础方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;由传入的时区日期转换为目标时区的时间, 并且可以指定原始时区和目标时区是否执行夏令时&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
/**
 时区转换:传入原始时区的日期,转换到目标时区的日期
 
 @param fromDateStr    原始日期
 @param dateFormateStr 日期格式
 @param fromTimeZone   原始时区
 @param fromIsDst      原始时区是否夏令时
 @param toTimeZone     目标时区
 @param toIsDst        目标时区是否夏令时
 
 @return 目标日期
 */
+ (NSString *)stringFromDate:(NSString *)fromDateStr dateFormate:(NSString *)dateFormateStr fromTimeZone:(NSString *)fromTimeZone fromIsDst:(BOOL)fromIsDst toTimeZone:(NSString *)toTimeZone toIsDst:(BOOL)toIsDst {
    NSRange fromTimeZonRange = [fromTimeZone rangeOfString:@&quot;+&quot;];
    if (fromTimeZonRange.length == 0) {
        fromTimeZonRange = [fromTimeZone rangeOfString:@&quot;-&quot;];
    }
    if (fromTimeZonRange.length == 0) return fromDateStr;
    NSArray *fromMinuteDigitArr = [fromTimeZone componentsSeparatedByString:@&quot;.&quot;];
    NSInteger fromMinuteDigit = fromMinuteDigitArr.count == 2 ? [fromMinuteDigitArr.lastObject integerValue] * 60 : 0;
    NSString *fromMinuteDigitStr = [[NSString stringWithFormat:@&quot;%02ld&quot;,fromMinuteDigit] substringToIndex:2];
    fromTimeZone = [NSString stringWithFormat:@&quot;%@%02d%@&quot;,[fromTimeZone substringToIndex:fromTimeZonRange.location + 1], [[fromTimeZone substringFromIndex:fromTimeZonRange.location + 1] intValue],fromMinuteDigitStr];
    NSRange toTimeZonRange = [toTimeZone rangeOfString:@&quot;+&quot;];
    if (toTimeZonRange.length == 0) {
        toTimeZonRange = [toTimeZone rangeOfString:@&quot;-&quot;];
    }
    if (toTimeZonRange.length == 0) return fromDateStr;
    
    NSArray *toMinuteDigitArr = [toTimeZone componentsSeparatedByString:@&quot;.&quot;];
    NSInteger toMinuteDigit = toMinuteDigitArr.count == 2 ? [toMinuteDigitArr.lastObject integerValue] * 60 : 0;
    NSString *toMinuteDigitStr = [[NSString stringWithFormat:@&quot;%02ld&quot;,toMinuteDigit] substringToIndex:2];
    toTimeZone = [NSString stringWithFormat:@&quot;%@%02d%@&quot;,[toTimeZone substringToIndex:toTimeZonRange.location + 1], [[toTimeZone substringFromIndex:toTimeZonRange.location + 1] intValue],toMinuteDigitStr];
    static NSDateFormatter *dateFormatter = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&amp;amp;onceToken, ^{
        dateFormatter = [[NSDateFormatter alloc] init];
    });
    dateFormatter.dateFormat = dateFormateStr;
    //将原始时间转换成原始时区对应的时间
    dateFormatter.timeZone = [NSTimeZone timeZoneWithAbbreviation:fromTimeZone];
    NSDate *fromDate = [dateFormatter dateFromString:fromDateStr];
    
    NSTimeInterval timeINterval = 1 * 60 * 60;
    //如果原始时区执行夏令时,则需要先减少1小时
    if (fromIsDst) {
        fromDate = [NSDate dateWithTimeInterval:-timeINterval sinceDate:fromDate];
    }
    
    //转换成目标时区的时间
    dateFormatter.timeZone = [NSTimeZone timeZoneWithAbbreviation:toTimeZone];
    NSString *toDateStr = [dateFormatter stringFromDate:fromDate];
    NSDate *toDate = [dateFormatter dateFromString:toDateStr];
    
    //如果目标时区执行夏令时,则需要加上1小时
    if (toIsDst) {
        toDate = [NSDate dateWithTimeInterval:timeINterval sinceDate:toDate];
    }
    //目标日期字符串
    toDateStr = [dateFormatter stringFromDate:toDate];
    //如果转换异常,返回原始日期; 转换成功,返回转换后的日期
    return ISNULL(toDateStr) ? fromDateStr : toDateStr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;用户时区和东八区互转&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;ol&gt;
      &lt;li&gt;用户区时间 —-&amp;gt; 东八区时间&lt;/li&gt;
      &lt;li&gt;东八区时间 —-&amp;gt; 用户区事件&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;用户时区日期转换为东八区日期&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 用户时区时间 ----&amp;gt; 东8区时间
 
 @param userTime     用户区的时间
 @param dateFormate  转换的时间格式
 @param userTimeZone 用户所在时区
 @param isDst        用户所在时区是否夏令时
 
 @return 对应东8区的时间
 */
+ (NSString *)userTime2GMT8:(NSString *)userTime dateFormate:(NSString *)dateFormate userTimeZone:(NSString *)userTimeZone isDst:(BOOL)isDst {
    return [NSString stringFromDate:userTime dateFormate:dateFormate fromTimeZone:userTimeZone fromIsDst:isDst toTimeZone:@&quot;GMT+8&quot; toIsDst:NO];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;东八区日期转换为用户时区日期&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 东8区时间 ----&amp;gt; 用户区时间
 
 @param gmt8Time     东8区时间
 @param dateFormate  转换的时间格式
 @param userTimeZone 用户区的时区
 @param isDst        用户区是否夏令时
 
 @return 对应用户区的时间
 */
+ (NSString *)GMT8Time2User:(NSString *)gmt8Time dateFormate:(NSString *)dateFormate userTimeZone:(NSString *)userTimeZone isDst:(BOOL)isDst {
    return [NSString stringFromDate:gmt8Time dateFormate:dateFormate fromTimeZone:@&quot;GMT+8&quot; fromIsDst:NO toTimeZone:userTimeZone toIsDst:isDst];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;自己在项目中的使用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;用户时区日期(使用手机时间和接口提供的用户时区,及是否夏令时) 转换为东八区日期&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 用户时区时间(使用手机时间和接口提供的用户时区,及是否夏令时) ----&amp;gt; 东8区时间
 
 @param self    用户时区时间(手机时间)
 @param dateFormate 转换的时间格式
 
 @return 东8区时间
 */
- (NSString *)userTime2GMT8WithDefaultTimeZoneDateFormate:(NSString *)dateFormate {
    return [NSString userTime2GMT8:self dateFormate:dateFormate userTimeZone:USER_DEFAULT_TIMEZONE isDst:USER_IS_DST];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;东八区日期转换为用户区日期(使用接口提供的用户时区,及夏令时)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 东8区时间 ----&amp;gt; 用户区时间(使用接口提供的用户时区,及夏令时)
 
 @param self    东8区时间
 @param dateFormate 转换的时间格式
 
 @return 用户时区时间 (使用接口提供的用户时区,及是否夏令时)
 */
- (NSString *)GMT8Time2UserWithDefaultTimeZoneDateFormate:(NSString *)dateFormate {
    return [NSString GMT8Time2User:self dateFormate:dateFormate userTimeZone:USER_DEFAULT_TIMEZONE isDst:USER_IS_DST];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/yongbin45/blog/151376&quot;&gt;iOS时间那点事–NSTimeZone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/yongbin45/blog/150667&quot;&gt;iOS时间那点事–NSDateFormatter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/qiutangfengmian/p/5288201.html&quot;&gt;iOS 时区问题总结 NSTimeZone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还有一些文章看过后找不到了, 此处没贴, 深表歉意~~~&lt;/strong&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>RxSwift 成长之路---基本概念和语法</title>
        <link>http://localhost:4000/2016/12/28/RxSwift-%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E8%AF%AD%E6%B3%95.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/28/RxSwift-%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E8%AF%AD%E6%B3%95.html</guid>
        <pubDate>Wed, 28 Dec 2016 10:17:31 +0800</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;更新时间: 2017-02-28
&lt;a href=&quot;http://www.jianshu.com/p/2e0dfba02ae5&quot;&gt;RxSwift + Moya + ObjectMapper + MVVM 的网络请求&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;
&lt;p&gt;刚开始接触&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;, 很多概念理不清; 试着阅读官方的&lt;code class=&quot;highlighter-rouge&quot;&gt;playground&lt;/code&gt;, 无奈英语水平有限, 看着英文文档,更加迷糊. 几经周折,找到这篇很好的教程, 作者整理的非常清晰, 感谢作者的分享精神.
请各位看官移步原文&lt;a href=&quot;http://www.codertian.com/2016/11/27/RxSwift-ru-keng-ji-read-document/&quot;&gt;田腾飞的博客 【iOS开发】RxSwift入坑解读-你所需要知道的各种概念&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;此处整理的不够清晰, 仅仅是为了自己对这些概念的进一步的记忆.所以为了不耽误大家的时间, 请大家点击这里,阅读原文作者的博客&lt;a href=&quot;http://www.codertian.com/&quot;&gt;沸沸腾（狒狒）&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;文件目录预览-基本概念划分&quot;&gt;文件目录预览, 基本概念划分&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-56ec8dfc17415f0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;目录&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-411971e968154f7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;可依次取消注释,在控制台查看运行结果&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;内容拆分&quot;&gt;内容拆分&lt;/h1&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;基本概念&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; 是可被观察的,理解为事件源.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; 是我们的观察者, 收到事件后, 事件的处理者
观察者需要订阅(&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;) 被观察者,才能收到&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;的事件通知消息&lt;/li&gt;
    &lt;li&gt;创建和订阅被观察者
创建被观察者其实就是创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;,就是创建一个流, 然后就可以被订阅&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;, 这样被观察者发出事件, 我们就能做相应的处理&lt;/li&gt;
    &lt;li&gt;DisposeBag
&lt;code class=&quot;highlighter-rouge&quot;&gt;DisposeBag&lt;/code&gt; 其实相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;, 在适当的时候销毁观察者, 理解为内存管理者&lt;/li&gt;
    &lt;li&gt;subscribe
&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;是订阅&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;发出的事件, 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;事件, &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;事件等. 而&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe(onNext:)&lt;/code&gt;是监听&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;发出的&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;事件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt;进行处理, 他会忽略&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;complete&lt;/code&gt;事件. 相对应的还有&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe(onError:)&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe(onCompleted:)&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;never-是创建一个sequence-但是不发出任何事件信号&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;never&lt;/code&gt; 是创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 但是不发出任何事件信号&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable&amp;lt;String&amp;gt;.never().subscribe { (_) in
            print(&quot;不会打印这句话, 因为不会被执行&quot;)
        }.addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;empty-是创建一个空的sequence-只能发出一个complete事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty&lt;/code&gt; 是创建一个空的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 只能发出一个&lt;code class=&quot;highlighter-rouge&quot;&gt;complete&lt;/code&gt;事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable&amp;lt;Int&amp;gt;.empty().subscribe { event in print(event) }.addDisposableTo(disposeBag)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;just-是创建一个sequence能发出特定的事件-能正常结束&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;just&lt;/code&gt; 是创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;能发出特定的事件, 能正常结束&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable&amp;lt;String&amp;gt;.just(&quot;💗&quot;).subscribe { (string) in
            print(string)
        }.addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;of-是创建一个sequence-能发出很多事件信号-subscribe只监听事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;of&lt;/code&gt; 是创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 能发出很多事件信号, subscribe只监听事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;1--&quot;, &quot;2--&quot;, &quot;3--&quot;, &quot;4--&quot;).subscribe { (str) in
            print(str)
        }.addDisposableTo(DisposeBag())
        
        Observable.of(&quot;1--&quot;, &quot;2--&quot;, &quot;3--&quot;, &quot;4--&quot;).subscribe(onNext: { (str) in
            print(str)
        }, onError: nil, onCompleted: nil, onDisposed: nil).addDisposableTo(DisposeBag())     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;from-是从集合中创建sequence-例如-字典-数组-set&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt; 是从集合中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 例如: 字典, 数组, &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.from([&quot;😀&quot;, &quot;😬&quot;, &quot;😂&quot;, &quot;😅&quot;]).subscribe(onNext: { print($0)
        }).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;create-我们可以自定义可观察的sequence&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; 我们可以自定义可观察的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myJust: (String) -&amp;gt; Observable&amp;lt;String&amp;gt; = { (element: String) -&amp;gt; Observable&amp;lt;String&amp;gt; in
            return Observable.create({ (observer) -&amp;gt; Disposable in
                observer.on(.next(element))
                observer.on(.completed)
                return Disposables.create()
            })
        }
        myJust(&quot;自定义可观察的sequence&quot;).subscribe(onNext: { (str) in
            print(str)
        }).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;range-就是创建一个sequence-他可以发出这个范围从开始到结束的所有事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;range&lt;/code&gt; 就是创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 他可以发出这个范围从开始到结束的所有事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.range(start: 1, count: 10).subscribe { print($0)
        }.addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;repeatelement-创建一个sequence-发出特定事件n次&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;repeatElement&lt;/code&gt; 创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 发出特定事件n次&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.repeatElement(&quot;⚾️&quot;).take(3).subscribe { print($0)
        }.addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;generate-是创建一个可观察的sequence-当初始化的条件为true时-他就会发出所对应的事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;generate&lt;/code&gt; 是创建一个可观察的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 当初始化的条件为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;时, 他就会发出所对应的事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.generate(initialState: 0, condition: { (element) -&amp;gt; Bool in
            element &amp;lt; 5
        }) { (element) -&amp;gt; Int in
            element + 1
        }.subscribe { (element) in
            print(element)
        }.addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;deferred-延期-会为每一个订阅者observer-创建一个新的可观察序列&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deferred&lt;/code&gt; (延期) 会为每一个订阅者&lt;code class=&quot;highlighter-rouge&quot;&gt;observer&lt;/code&gt;, 创建一个新的可观察序列&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var count = 1
        let deferredSequence = Observable&amp;lt;String&amp;gt;.deferred { () -&amp;gt; Observable&amp;lt;String&amp;gt; in
            print(&quot;Creating \(count)&quot;)
            count += 1
            return Observable.create({ (observer) -&amp;gt; Disposable in
                observer.onNext(&quot;🏄🏽‍♀️&quot;)
                observer.onNext(&quot;🏄&quot;)
                observer.onNext(&quot;⛷&quot;)
                return Disposables.create()
            })
        }
        deferredSequence.subscribe { print($0)
        }.addDisposableTo(DisposeBag())
        deferredSequence.subscribe { print($0)
        }.addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;error-创建一个可观察序列-但不发出任何正常的事件-只发出error事件并结束&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; 创建一个可观察序列, 但不发出任何正常的事件, 只发出&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;事件并结束&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;doono-doonnext-方法就是在subscribeonnext前调用dooncompleted就是在subscribeoncompleted前面调用的&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doOno doOnNext( :)&lt;/code&gt;方法就是在&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe(onNext:)&lt;/code&gt;前调用，&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnCompleted(:)&lt;/code&gt;就是在&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe(onCompleted:)&lt;/code&gt;前面调用的。&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;🚗&quot;, &quot;🚕&quot;, &quot;🚙&quot;, &quot;🚌&quot;).do(onNext: { (str) in
            print(&quot;doOn--\(str)&quot;)
        }, onError: nil, onCompleted: nil, onSubscribe: nil, onDispose: nil).subscribe { (str) in
            print(str)
        }.addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;subject的使用&quot;&gt;Subject的使用&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;observer&lt;/code&gt; 之间的桥梁, 一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt; 既是&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; 也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;observer&lt;/code&gt;, 他既可以发出事件,又可以监听事件
&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ReplaySubject&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;BehaviorSubject&lt;/code&gt;是不会自动发出&lt;code class=&quot;highlighter-rouge&quot;&gt;completed&lt;/code&gt;事件的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;publishsubject--当你订阅publishsubject的时候-你只能接收到订阅他之后发生的事件-subjectonnext发出onnext事件对应的还有onerror和oncompleted事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publishSubject&lt;/code&gt;  当你订阅&lt;code class=&quot;highlighter-rouge&quot;&gt;publishSubject&lt;/code&gt;的时候, 你只能接收到订阅他之后发生的事件, &lt;code class=&quot;highlighter-rouge&quot;&gt;subject.onNext()&lt;/code&gt;发出&lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;事件，对应的还有&lt;code class=&quot;highlighter-rouge&quot;&gt;onError()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted()&lt;/code&gt;事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let publishSubject = PublishSubject&amp;lt;String&amp;gt;()
        let disposeBag = DisposeBag()
        publishSubject.subscribe({ print(&quot;1---&quot;, $0)
        }).addDisposableTo(disposeBag)
        publishSubject.onNext(&quot;🐶&quot;)
        publishSubject.onNext(&quot;🐱&quot;)
        
        publishSubject.subscribe({ print(&quot;2---&quot;, $0)
        }).addDisposableTo(disposeBag)
        publishSubject.onNext(&quot;🅰️&quot;)
        publishSubject.onNext(&quot;🅱️&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;replaysubject-当你订阅replaysubject的时候-你可以接收到订阅他之后的事件-单页可以接收订阅他之前发出的事件-接收几个事件取决于buffersize的大小&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReplaySubject&lt;/code&gt; 当你订阅&lt;code class=&quot;highlighter-rouge&quot;&gt;ReplaySubject&lt;/code&gt;的时候, 你可以接收到订阅他之后的事件, 单页可以接收订阅他之前发出的事件, 接收几个事件取决于&lt;code class=&quot;highlighter-rouge&quot;&gt;bufferSize&lt;/code&gt;的大小&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let replaySubject = ReplaySubject&amp;lt;Any&amp;gt;.create(bufferSize: 3)
        let replayDisposeBag = DisposeBag()
        
        replaySubject.subscribe({ print(&quot;replaySubject--1--&quot;, $0)}).addDisposableTo(replayDisposeBag)
        replaySubject.onNext(&quot;A&quot;)
        replaySubject.onNext(&quot;B&quot;)
        replaySubject.onNext(&quot;C&quot;)
        replaySubject.onNext(&quot;D&quot;)
        
        replaySubject.subscribe({ print(&quot;replaySubject--2--&quot;, $0)}).addDisposableTo(replayDisposeBag)
        replaySubject.onNext(&quot;一&quot;)
        replaySubject.onNext(&quot;二&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;behaviorsubject-当你订阅了behasubject-你会接收到订阅之前的最后一个事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BehaviorSubject &lt;/code&gt;当你订阅了&lt;code class=&quot;highlighter-rouge&quot;&gt;BehaSubject&lt;/code&gt;, 你会接收到订阅之前的最后一个事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let behaviorSubject = BehaviorSubject(value: &quot;🍎&quot;)
        let behaviorDisposeBag = DisposeBag()
        print(&quot;\n\n&quot;)
        behaviorSubject.subscribe({ print(&quot;BehaviorSubject--1--&quot;, $0) }).addDisposableTo(behaviorDisposeBag)
        behaviorSubject.onNext(&quot;🌝&quot;)
        behaviorSubject.onNext(&quot;🌛&quot;)
        behaviorSubject.onNext(&quot;🌟&quot;)
        behaviorSubject.subscribe({ print(&quot;BehaviorSubject--2--&quot;, $0)} ).addDisposableTo(behaviorDisposeBag)
        behaviorSubject.onNext(&quot;🌎&quot;)
        behaviorSubject.onNext(&quot;🌕&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注: &lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ReplaySubject&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;BehaviorSubject&lt;/code&gt;是不会自动发出&lt;code class=&quot;highlighter-rouge&quot;&gt;completed&lt;/code&gt;事件的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;variable-是behaviorsubject的一个包装箱-就像是一个箱子一样-使用的时候需要调用asobservable拆箱-里面的value是一个behaviorsubject-他不会发出error事件-但是会自动发出complete事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Variable&lt;/code&gt; 是&lt;code class=&quot;highlighter-rouge&quot;&gt;behaviorSubject&lt;/code&gt;的一个包装箱, 就像是一个箱子一样, 使用的时候需要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;asObservable&lt;/code&gt;拆箱, 里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;BehaviorSubject&lt;/code&gt;, 他不会发出&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;事件, 但是会自动发出&lt;code class=&quot;highlighter-rouge&quot;&gt;complete&lt;/code&gt;事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let variable = Variable(&quot;🌖&quot;)
        let variableDisposeBag = DisposeBag()
        variable.asObservable().subscribe({ print(&quot;variableDisposeBag--1--&quot;, $0)} ).addDisposableTo(variableDisposeBag)
        variable.value = &quot;☀️&quot;
        variable.value = &quot;🌤&quot;
        
        variable.asObservable().subscribe({ print(&quot;variableDisposeBag--2--&quot;, $0)}).addDisposableTo(variableDisposeBag)
        variable.value = &quot;🔴&quot;
        variable.value = &quot;🔵&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;联合操作&quot;&gt;联合操作&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;联合操作就是把多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;(被观察者) 合并成单个&lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt;流&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;startwith-在发出事件消息之前-先发出某个特定的事件消息-比如发出事件2-3-startwith1后会先发出1-然后发出2-3&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;startWith&lt;/code&gt; 在发出事件消息之前, 先发出某个特定的事件消息, 比如发出事件2, 3 ,startWith(1),后,会先发出1, 然后发出2, 3&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;2&quot;, &quot;3&quot;).startWith(&quot;1&quot;).startWith( &quot;-1&quot;, &quot;0&quot;).subscribe({ print(&quot;startWith---&quot;,$0 )}).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;merge-把两个observable-流合并成一个observable流-根据时间轴发出对应的事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; 把两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; 流合并成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;流, 根据时间轴发出对应的事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let mergeDisposeBag = DisposeBag()
        let mergeSubject1 = PublishSubject&amp;lt;String&amp;gt;()
        let mergeSubject2 = PublishSubject&amp;lt;String&amp;gt;()
        
        Observable.of(mergeSubject1, mergeSubject2).merge().subscribe(onNext: { print($0) }, onError: nil, onCompleted: nil, onDisposed: nil).addDisposableTo(mergeDisposeBag)
        mergeSubject1.onNext(&quot;🌕&quot;)
        mergeSubject1.onNext(&quot;🌖&quot;)
        mergeSubject2.onNext(&quot;🌗&quot;)
        mergeSubject1.onNext(&quot;🌘&quot;)
        mergeSubject2.onNext(&quot;🌑&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;zip-绑定小于等于8-个的observable流-结合在一起办理-注-zip-是一个事件对应一个事件-不满足配对的将会被抛弃&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; 绑定小于等于8 个的&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;流, 结合在一起办理, 注: zip 是一个事件对应一个事件, 不满足配对的将会被抛弃&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let stringSubject = PublishSubject&amp;lt;String&amp;gt;()
        let intSubject = PublishSubject&amp;lt;Int&amp;gt;()
        let zipDisposeBag = DisposeBag()
        
        Observable.zip(stringSubject, intSubject) { (stringElement, intElement) -&amp;gt; String in
            return &quot;\(stringElement) \(intElement)&quot;
            }.subscribe(onNext: { print($0)}).addDisposableTo(zipDisposeBag)
        stringSubject.onNext(&quot;A&quot;)
        stringSubject.onNext(&quot;B&quot;)
        intSubject.onNext(1)
        intSubject.onNext(2)
        intSubject.onNext(3)
        stringSubject.onNext(&quot;C&quot;)
        intSubject.onNext(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;combinelatest-绑定最多不超过8个的obaservable-结合在一起处理-和zip-不同的是-combinelast是一个流的事件对应另一流的最后一个事件-两个流的事件都是最近的事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest&lt;/code&gt; 绑定最多不超过8个的&lt;code class=&quot;highlighter-rouge&quot;&gt;Obaservable&lt;/code&gt;, 结合在一起处理. 和&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; 不同的是, &lt;code class=&quot;highlighter-rouge&quot;&gt;combineLast&lt;/code&gt;是一个流的事件对应另一流的’最后’一个事件, 两个流的事件都是’最近’的事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let stringSubject2 = PublishSubject&amp;lt;String&amp;gt;()
        let intSubject2 = PublishSubject&amp;lt;Int&amp;gt;()
        let zipDisposeBag2 = DisposeBag()
        print(&quot;\n&quot;)
        Observable.combineLatest(stringSubject2, intSubject2) { (stringElement, intElement) -&amp;gt; String in
            return &quot;\(stringElement) \(intElement)&quot;
            }.subscribe(onNext: { print($0)}).addDisposableTo(zipDisposeBag2)
        stringSubject2.onNext(&quot;A&quot;)
        stringSubject2.onNext(&quot;B&quot;)
        intSubject2.onNext(1)
        intSubject2.onNext(2)
        intSubject2.onNext(3)
        stringSubject2.onNext(&quot;C&quot;)
        intSubject2.onNext(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;switchlatest-可以对事件流进行转换-本来监听的subject1--我们可以通过改变variable里面的value-更换事件源-变成监听subject2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;switchLatest&lt;/code&gt; 可以对事件流进行转换, 本来监听的&lt;code class=&quot;highlighter-rouge&quot;&gt;subject1&lt;/code&gt; , 我们可以通过改变&lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt;里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, 更换事件源, 变成监听&lt;code class=&quot;highlighter-rouge&quot;&gt;subject2&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let switchDisposeBag = DisposeBag()
        let subject1 = BehaviorSubject(value: &quot;😍&quot;)
        let subject2 = BehaviorSubject(value: &quot;😘&quot;)
        let variable = Variable(subject1)
        variable.asObservable().switchLatest().subscribe({ print($0)}).addDisposableTo(switchDisposeBag)
        subject1.onNext(&quot;🍏&quot;)
        subject1.onNext(&quot;🍎&quot;)
        subject2.onNext(&quot;🍝&quot;)
        variable.value = subject2
        subject1.onNext(&quot;🍉&quot;)
        subject2.onNext(&quot;🍲&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;变换操作&quot;&gt;变换操作&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;变换操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;map-通过传入一个函数闭包把原来的sequence-转换为一个新的sequence&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; 通过传入一个函数闭包把原来的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 转换为一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(1, 2, 3).map { $0 * $0
            }.subscribe({ print($0)}).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;flatmap-将一个sequence-转换为另一个sequence-当你接收一个sequence事件-你还想接收其他sequence发出的事件的话可以使用flatmap-他会将每一个sequence事件进行处理后-然后再以一个新的sequence形式发出事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; 将一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 转换为另一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 当你接收一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;事件, 你还想接收其他&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;发出的事件的话,可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;, 他会将每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;事件进行处理后, 然后再以一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;形式发出事件.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let flatMapDisposeBag = DisposeBag()
        struct Player {
            var score: Variable&amp;lt;Int&amp;gt;
        }
        let 😈 = Player(score: Variable(80))
        let 👻 = Player(score: Variable(90))
        let 💀 = Player(score: Variable(550))
        
        let variablePlayer = Variable(😈)
        variablePlayer.asObservable().flatMapLatest { $0.score.asObservable()
            }.subscribe({ print($0)}).addDisposableTo(flatMapDisposeBag)
        😈.score.value = 85
        variablePlayer.value = 👻
        😈.score.value = 95
        😈.score.value = 222
        
        variablePlayer.value = 💀
        👻.score.value = 100
        💀.score.value = 666
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;flatMapLatest 只会接收最新的value事件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;scan-就是一个初始化的数-然后不断的拿前一个结果和最新的值-进行处理操作&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scan&lt;/code&gt; 就是一个初始化的数, 然后不断的拿前一个结果和最新的值, 进行处理操作&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.range(start: 1, count: 100).scan(0) { (a, b) -&amp;gt; Int in
            return a + b
            }.subscribe({ print($0)}).addDisposableTo(DisposeBag())
        Observable.of(10, 100, 1000).scan(0) { $0 + $1
            }.subscribe({ print($0)}).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;过滤和约束&quot;&gt;过滤和约束&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;过滤和约束&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;filter-过滤掉某些不符合要求的事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 过滤掉某些不符合要求的事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;😀&quot;, &quot;😙&quot;, &quot;😀&quot;, &quot;😀&quot;, &quot;😜&quot;, &quot;😍&quot;, &quot;😇&quot;, &quot;😗&quot;, &quot;😘&quot;, &quot;🙃&quot;, &quot;😉&quot;).filter { (str) -&amp;gt; Bool in
            return str == &quot;😀&quot;
            }.subscribe({ print($0)}).addDisposableTo(DisposeBag())
        Observable.range(start: 0, count: 100).filter { (num) -&amp;gt; Bool in
            return num % 2 == 0
            }.subscribe({ print($0)}).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;distinctuntilchanged-当下一个事件与前一个事件不是同一个事件才进行处理操作&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;distinctUntilChanged&lt;/code&gt; 当下一个事件与前一个事件不是同一个事件才进行处理操作&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;⚽️&quot;, &quot;🏈&quot;, &quot;🏀&quot;, &quot;⚾️&quot;, &quot;⚾️&quot;, &quot;⚾️&quot;, &quot;🏀&quot;, &quot;⚽️&quot;, &quot;🏀&quot;, &quot;⚽️&quot;, &quot;⚽️&quot;, &quot;🎾&quot;, &quot;🏐&quot;, &quot;⚽️&quot;, &quot;🏐&quot;, &quot;🏐&quot;).distinctUntilChanged().subscribe( { print($0)} ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;elementat-只处理在指定位置的事件&quot;&gt;elementAt 只处理在指定位置的事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;🎤&quot;, &quot;🎼&quot;, &quot;🎹&quot;, &quot;🎧&quot;).single().subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;error(Sequence contains more than one element.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;🎹&quot;, &quot;🎹&quot;, &quot;🎧&quot;).single( {$0 == &quot;🎧&quot;} ).subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;completed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;🎹&quot;, &quot;🎹&quot;, &quot;🎧&quot;).single( {$0 == &quot;🎹&quot;} ).subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;error(Sequence contains more than one element.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;🎹&quot;, &quot;🎹&quot;, &quot;🎧&quot;).single( {$0 == &quot;🎤&quot;} ).subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;error(Sequence doesn’t contain any elements.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;take-只处理前几个事件信号&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;take&lt;/code&gt; 只处理前几个事件信号&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;☮️&quot;, &quot;☪️&quot;, &quot;🔯&quot;, &quot;☯️&quot;, &quot;♉️&quot;, &quot;♒️&quot;).take(3).subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;takelast-只处理后几个事件信号&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeLast&lt;/code&gt; 只处理后几个事件信号&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;☮️&quot;, &quot;☪️&quot;, &quot;🔯&quot;, &quot;☯️&quot;, &quot;♉️&quot;, &quot;♒️&quot;).takeLast(3).subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;takewhile-当条件满足时处理&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeWhile&lt;/code&gt; 当条件满足时处理&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.range(start: 1, count: 5).takeWhile( { $0 &amp;lt;= 3} ).subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;takeuntil-接收事件消息-直到另一个sequence-发出事件消息的时候&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeUntil&lt;/code&gt; 接收事件消息, 直到另一个sequence 发出事件消息的时候&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let sourceSequence = PublishSubject&amp;lt;String&amp;gt;()
        let stopSequence = PublishSubject&amp;lt;String&amp;gt;()
        let takeUntilDisposeBag = DisposeBag()
        sourceSequence.takeUntil(stopSequence).subscribe( { print($0) } ).addDisposableTo(takeUntilDisposeBag)
        sourceSequence.onNext(&quot;♻️&quot;)
        sourceSequence.onNext(&quot;🈯️&quot;)
        stopSequence.onNext(&quot;⛔️&quot;)
        sourceSequence.onNext(&quot;💹&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;skip-取消前几个事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt; 取消前几个事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;🈶&quot;, &quot;🈷️&quot;, &quot;🈺&quot;, &quot;🈸&quot;, &quot;🈚️&quot;).skip(2).subscribe( { print($0)} ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;skipwhile-满足事件消息的都取消-当遇到不满足条件的事件消息后后面的就不考虑了&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skipWhile&lt;/code&gt; 满足事件消息的都取消, 当遇到不满足条件的事件消息后,后面的就不考虑了&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(&quot;🈶&quot;, &quot;🈷️&quot;, &quot;🈺&quot;, &quot;🈸&quot;, &quot;🈚️&quot;).skipWhile( { $0 == &quot;🈶&quot;} ).subscribe( { print($0)} ).addDisposableTo(DisposeBag())
        Observable.range(start: 0, count: 5).skipWhile( { $0 &amp;lt; 3} ).subscribe( { print($0)} ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;skipwhilewithindex-满足条件的都被取消-可以根据元素和下表分别决定-传入的闭包和skipwhile有点区别而已-当遇到不满足条件的事件消息后后面的就不考虑了&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skipWhileWithIndex&lt;/code&gt; 满足条件的都被取消, 可以根据元素和下表分别决定, 传入的闭包和&lt;code class=&quot;highlighter-rouge&quot;&gt;skipWhile&lt;/code&gt;有点区别而已, 当遇到不满足条件的事件消息后,后面的就不考虑了&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let skipWithIndexDisposeBag = DisposeBag()
        Observable.of(&quot;1🈶&quot;, &quot;2😀&quot;, &quot;1🈺&quot;, &quot;🈸&quot;, &quot;😅&quot;).skipWhileWithIndex { (element, index) -&amp;gt; Bool in
            return index != 3
            }.subscribe( { print(&quot;----&quot;, $0)} ).addDisposableTo(skipWithIndexDisposeBag)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注: 当遇到不满足条件的事件消息后,后面的就不考虑了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;skipuntil-知道某个sequence发出了事件消息-才开始接收当前sequence发出的事件消息&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skipUntil&lt;/code&gt; 知道某个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;发出了事件消息, 才开始接收当前&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;发出的事件消息&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let skipUntilDisposeBag = DisposeBag()
        let skipUntilStartSubject = PublishSubject&amp;lt;String&amp;gt;()
        let skipUntilStopSubject = PublishSubject&amp;lt;Int&amp;gt;()
        skipUntilStartSubject.skipUntil(skipUntilStopSubject).subscribe( { print($0) } ).addDisposableTo(skipUntilDisposeBag)
        skipUntilStartSubject.onNext(&quot;🐠&quot;)
        skipUntilStartSubject.onNext(&quot;🐟&quot;)
        
        skipUntilStopSubject.onNext(0)// skipUntilStopSubject 接收消息后, skipUntilStartSubject才会开始接收消息
        
        skipUntilStartSubject.onNext(&quot;🐡&quot;)
        skipUntilStartSubject.onNext(&quot;🐬&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注:   &lt;code class=&quot;highlighter-rouge&quot;&gt;skipUntilStopSubject&lt;/code&gt; 接收消息后, &lt;code class=&quot;highlighter-rouge&quot;&gt;skipUntilStartSubject&lt;/code&gt;才会开始接收消息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;数学操作&quot;&gt;数学操作&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;数学操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;toarray-将sequence转换成一个array-并转换成单一事件信号-然后结束&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toArray&lt;/code&gt; 将&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;转换成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, 并转换成单一事件信号, 然后结束&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.range(start: 1, count: 10).toArray().subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;reduce-用一个初始值-对事件数据进行累计操作-reduce-接收一个初始值和一个操作符&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; 用一个初始值, 对事件数据进行累计操作. &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; 接收一个初始值,和一个操作符&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Observable.of(10, 100, 1000).reduce(1, accumulator: +).subscribe( { print($0) } ).addDisposableTo(DisposeBag())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;concat-合并-把多个sequence-合并为-一个-sequence-并且当前面一个sequence发出了complete事件-才会开始下一个sequence事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;concat&lt;/code&gt; (合并) 把多个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 合并为 一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;, 并且当前面一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;发出了&lt;code class=&quot;highlighter-rouge&quot;&gt;complete&lt;/code&gt;事件, 才会开始下一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let concatDisposeBag = DisposeBag()
        let concatBehaviorSubject1 = BehaviorSubject(value: &quot;☀️&quot;)
        let concatBehaviorSubject2 = BehaviorSubject(value: &quot;🍎&quot;)
        
        let concatVariable = Variable(concatBehaviorSubject1)
        concatVariable.asObservable().concat().subscribe( { print($0) } ).addDisposableTo(concatDisposeBag)
        
        concatBehaviorSubject1.onNext(&quot;🌧&quot;)
        concatBehaviorSubject1.onNext(&quot;❄️&quot;)
        concatVariable.value = concatBehaviorSubject2
        concatBehaviorSubject2.onNext(&quot;🍓&quot;)
        concatBehaviorSubject1.onCompleted()
        concatBehaviorSubject2.onNext(&quot;🍒&quot;)
        concatBehaviorSubject2.onNext(&quot;🍉&quot;)
        concatBehaviorSubject1.onNext(&quot;⛅️&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;next(☀️)
         next(🌧)
         next(❄️)
         next(🍓)
         next(🍒)
         next(🍉)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;连接性操作&quot;&gt;连接性操作&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Connectable Observable 订阅时不开始发射事件消息, 而是仅当调用他们的connec() 方法时.
这样就可以等待我们所有想要的订阅者都订阅了以后再开始发事件消息, 这样能保证我们所有的订阅者都能够接收到事件消息. 简单说就是等大家都准备完成后, 才开始发消息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;例-每隔一秒-发送一个事件&quot;&gt;例: 每隔一秒 发送一个事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let interval = Observable&amp;lt;Int&amp;gt;.interval(1, scheduler: MainScheduler.instance)
       _ = interval.subscribe(onNext: { print(&quot;Subscription: 1, Event: \($0)&quot;) })
       DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 5) {
           _ = interval.subscribe(onNext: { print(&quot;Subscription: 2, Event: \($0)&quot;) })
       }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;publish-将一个正常的sequence-转换为-connectable-sequence-可以指定时间发送事件&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt; 将一个正常的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;connectable sequence&lt;/code&gt;, 可以指定时间发送事件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let intSequence = Observable&amp;lt;Int&amp;gt;.interval(1, scheduler: MainScheduler.instance).publish()
       _ = intSequence.subscribe(onNext: { print(&quot;Subscription: 1, Event: \($0)&quot;) })
       DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 2) {
           _ = intSequence.connect()
       }
       DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 4) {
           _ = intSequence.subscribe(onNext: { print(&quot;Subscription: 2, Event: \($0)&quot;) })
       }
       DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 6) {
           _ = intSequence.subscribe(onNext: { print(&quot;Subscription: 3, Event: \($0)&quot;) })
       }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;replay-讲一个正常的sequence-转换成一个connectable-sequence-然后和replaysubject的buffersize相似-能接收到订阅之前的事件消息&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;replay&lt;/code&gt; 讲一个正常的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 转换成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;connectable sequence&lt;/code&gt;, 然后和&lt;code class=&quot;highlighter-rouge&quot;&gt;replaySubject&lt;/code&gt;的`bufferSize相似, 能接收到订阅之前的事件消息&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let replaySequence = Observable&amp;lt;Int&amp;gt;.interval(1, scheduler: MainScheduler.instance).replay(1) // 能接收到订阅之前的n条信息
       _ = replaySequence.subscribe( { print(&quot;第1个订阅者--Event&quot;, $0)} )
       DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 1) {
           _ = replaySequence.connect()
       }
       
       DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 4) {
           _ = replaySequence.subscribe( { print(&quot;第2个订阅者--Event&quot;, $0)} )
       }
       
       DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 6) {
           _ = replaySequence.subscribe( { print(&quot;第3个订阅者--Event&quot;, $0)} )
       }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;multicast-将一个正常的sequence-转换为-connectable-sequence--并且通过特定的subject发送出去-例-publishsubject-replaysubject-behaviorsubject-variable&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multicast&lt;/code&gt; 将一个正常的&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;connectable sequence&lt;/code&gt; , 并且通过特定的&lt;code class=&quot;highlighter-rouge&quot;&gt;subject&lt;/code&gt;发送出去, 例: &lt;code class=&quot;highlighter-rouge&quot;&gt;publishSubject&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;replaySubject&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;behaviorSubject&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Variable&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let subject = PublishSubject&amp;lt;Int&amp;gt;()
        _ = subject.subscribe( { print(&quot;subject1--&quot;, $0) } )
        let multicastSequence = Observable&amp;lt;Int&amp;gt;.interval(1, scheduler: MainScheduler.instance).multicast(subject)
        _ = multicastSequence.subscribe( { print(&quot;subject2--&quot;, $0) } )
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 2) { 
            _ = multicastSequence.connect()
        }
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 4) {
            _ = multicastSequence.subscribe( { print(&quot;subject3--&quot;, $0) } )
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;错误处理&quot;&gt;错误处理&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;错误处理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;catcherrorjustreturn-遇到error的时候就return一个值-然后结束&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;catchErrorJustReturn&lt;/code&gt; 遇到’error’的时候就’return’一个值, 然后结束&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let justReturnDisposeBag = DisposeBag()
        let justReturnSubject = PublishSubject&amp;lt;String&amp;gt;()
        justReturnSubject.catchErrorJustReturn(&quot;😱&quot;).subscribe( { print($0) } ).addDisposableTo(justReturnDisposeBag)
        justReturnSubject.onNext(&quot;☺️&quot;)
        justReturnSubject.onNext(&quot;😋&quot;)
        justReturnSubject.onNext(&quot;😍&quot;)
        justReturnSubject.onError(NSError(domain: &quot;❎&quot;, code: 1000001, userInfo: nil) as Error)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;catcherror-捕获error进行处理-可以返回另一个sequence-进行订阅&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;catchError&lt;/code&gt; 捕获&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;进行处理, 可以返回另一个&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt; 进行订阅&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let catchErrorDisposeBag = DisposeBag()
        let catchErrorSubject1 = PublishSubject&amp;lt;String&amp;gt;()
        let catchErrorSubject2 = PublishSubject&amp;lt;String&amp;gt;()
        catchErrorSubject1.catchError { (error) -&amp;gt; Observable&amp;lt;String&amp;gt; in
            print(&quot;errro: ---\(error)&quot;)
            return catchErrorSubject2
            }.subscribe( { print($0) } ).addDisposableTo(catchErrorDisposeBag)
        catchErrorSubject1.onNext(&quot;😀&quot;)
        catchErrorSubject1.onNext(&quot;😬&quot;)
        catchErrorSubject2.onNext(&quot;😂&quot;) // 不会打印, 当subject1 遇到error后, subject2 才会被订阅
        
        catchErrorSubject1.onError(NSError(domain: &quot;❎&quot;, code: 1000001, userInfo: nil) as Error)
        catchErrorSubject2.onNext(&quot;🤑&quot;) // 会打印, 因为已经被订阅了
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;retry-重试-遇见error事件可以进行重试-比如网络请求失败-可以进行重新连接&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;retry&lt;/code&gt; (重试) 遇见&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;事件可以进行重试, 比如网络请求失败, 可以进行重新连接&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let retryDisposeBag = DisposeBag()
        var count = 1
        let myRetrySequence = Observable&amp;lt;String&amp;gt;.create { (observer) -&amp;gt; Disposable in
            observer.onNext(&quot;----1&quot;)
            observer.onNext(&quot;----2&quot;)
            observer.onNext(&quot;----3&quot;)
            if count &amp;lt;= 2 {
                let error = NSError(domain: &quot;❎&quot;, code: 1000001, userInfo: nil) as Error
                observer.onError(error)
                print(error)
                count += 1
            }
            observer.onNext(&quot;----4&quot;)
            observer.onCompleted()
            
            return Disposables.create()
        }
myRetrySequence.retry(5).subscribe( { print($0) } ).addDisposableTo(retryDisposeBag)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;retry()&lt;/code&gt; 无限重复— 直到成功&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myRetrySequenceretry().subscribe( { print($0) } ).addDisposableTo(retryDisposeBag)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;debug&quot;&gt;debug&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;debug&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;debug-打印所有的订阅-事件-和disposals&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt; 打印所有的订阅, 事件, 和&lt;code class=&quot;highlighter-rouge&quot;&gt;disposals&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myRetrySequence.debug().retry(5).subscribe( { print($0) } ).addDisposableTo(retryDisposeBag)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;rxswiftresourcestotal-查看rxswift-所有资源的占用&quot;&gt;RxSwift.Resources.total 查看RxSwift 所有资源的占用&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(RxSwift.Resources.total)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;RxSwift.Resources.total 没能调用成功 😂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;代码稍后会上传到github-需要查看结果的小伙伴可以下载运行&quot;&gt;代码稍后会上传到github, 需要查看结果的小伙伴可以下载运行&lt;/h1&gt;

&lt;h1 id=&quot;写在最后-本人ios开发菜鸟一枚-不妥之处还望大神指教&quot;&gt;写在最后 本人iOS开发菜鸟一枚, 不妥之处,还望大神指教~~~~~~~~~~~&lt;/h1&gt;

</description>
      </item>
    
      <item>
        <title>iOS-UILabel扩展实现数字增长/减小动画</title>
        <link>http://localhost:4000/2016/12/24/iOS-UILabel%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%AD%97%E5%A2%9E%E9%95%BF-%E5%87%8F%E5%B0%8F%E5%8A%A8%E7%94%BB.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/24/iOS-UILabel%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%AD%97%E5%A2%9E%E9%95%BF-%E5%87%8F%E5%B0%8F%E5%8A%A8%E7%94%BB.html</guid>
        <pubDate>Sat, 24 Dec 2016 10:17:31 +0800</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-4f6bbcf66c1f4c52.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;animationuilabel&quot;&gt;AnimationUILabel&lt;/h1&gt;
&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;
&lt;p&gt;该版本为Swift版本 ,原文在这&lt;a href=&quot;https://github.com/ScottZg/AnimationNumLabel&quot;&gt;OC版本&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;效果展示&quot;&gt;效果展示&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-f3f39d16bf4007e2.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;数字减小.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-e266230237b7c2d1.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;数字增长.gif&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;主要代码&quot;&gt;主要代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// 获取时长
    ///
    /// - Parameter num: 数字
    /// - Returns: 返回显示时间
    func getTimeDurationFromNum(num: Double) -&amp;gt; Double {
        if num &amp;lt;= 0 {
            return 0
        } else if num &amp;lt; 1000 {
            return 1
        } else if num &amp;lt; 2000 {
            return num / 1000
        } else {
            return 1
        }
    }
    
    func animation(_ fromNum: Double, toNum: Double, duration: Double) -&amp;gt; Void {
        self.text = String(format: &quot;%0.2f&quot;, fromNum)
        let totalCountInt = self.getCountFromNum(num: fabs(toNum - fromNum))
        let totalCount = Double(totalCountInt)
        let delayTime = duration / totalCount
        var mediumNumArr: [String] = [String]()
        for i in 0..&amp;lt;Int(totalCount) {
            if (toNum - fromNum) &amp;gt; 0 {
                mediumNumArr.append(String(format: &quot;%.2f&quot;, Double(i) * ((toNum-fromNum)/totalCount)+fromNum))
            } else {
                mediumNumArr.append(String(format: &quot;%.2f&quot;, fromNum - Double(i) * ((fromNum - toNum) / totalCount)))
            }
            if i == Int(totalCount) - 1 {
                mediumNumArr.append(String(format: &quot;%.2f&quot;, toNum))
            }
        }
        changeLabelTitle(delayTime, mediumArr: &amp;amp;mediumNumArr)
    }
    
    /// 得到分割数目
    ///
    /// - Parameter num: 数字
    /// - Returns: 分割数目
    func getCountFromNum(num: Double) -&amp;gt; Int {
        if num &amp;lt;= 0 {
            return 1
        } else if num &amp;lt; 1000 {
            return 100
        } else {
            return Int(num / 20)
        }
    }
    
    func changeLabelTitle(_ delayTime: Double, mediumArr: inout [String]) {
        if mediumArr.count &amp;lt;= 0 {
        } else {
            self.text = mediumArr.first
            mediumArr.remove(at: 0)
            var temp = mediumArr
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + delayTime, execute: {
                self.changeLabelTitle(delayTime, mediumArr: &amp;amp;temp)
            })
        }
    }
    
    func stopRuning() {
    
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;使用方法&quot;&gt;使用方法&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;animationLabel.stopRuning()
animationLabel.animation(start, toNum: end, duration: animationLabel.getTimeDurationFromNum(num: fabs(end)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;demo地址&quot;&gt;demo地址&lt;/h1&gt;
&lt;p&gt;github地址&lt;a href=&quot;https://github.com/YQqiang/AnimationUILabel&quot;&gt;AnimationUILabel&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;写在最后-本人ios开发菜鸟一枚不妥之处还望大神指教&quot;&gt;写在最后 本人iOS开发菜鸟一枚,不妥之处,还望大神指教~~~~&lt;/h1&gt;

</description>
      </item>
    
      <item>
        <title>iOS-日期选择控件(可单独选年/年月/年月日)</title>
        <link>http://localhost:4000/2016/12/23/iOS-%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E6%8E%A7%E4%BB%B6(%E5%8F%AF%E5%8D%95%E7%8B%AC%E9%80%89%E5%B9%B4-%E5%B9%B4%E6%9C%88-%E5%B9%B4%E6%9C%88%E6%97%A5).html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/23/iOS-%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E6%8E%A7%E4%BB%B6(%E5%8F%AF%E5%8D%95%E7%8B%AC%E9%80%89%E5%B9%B4-%E5%B9%B4%E6%9C%88-%E5%B9%B4%E6%9C%88%E6%97%A5).html</guid>
        <pubDate>Fri, 23 Dec 2016 10:17:31 +0800</pubDate>
        <description>&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;
&lt;p&gt;iOS系统提供的UIDatePicker 只能用于选择年月日,通过借鉴&lt;a href=&quot;http://stackoverflow.com/questions/3348247/uidatepicker-select-month-and-year&quot;&gt;stackoverflow&lt;/a&gt;上的思路对月日图层的隐藏来达到显示年/ 年月的效果&lt;/p&gt;

&lt;h1 id=&quot;效果展示&quot;&gt;效果展示&lt;/h1&gt;
&lt;h2 id=&quot;通过分段控制器-选择年-弹出仅有年份选择的datepicker&quot;&gt;通过分段控制器 选择年 弹出仅有年份选择的datePicker&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-2ff3a9dee45bff5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;通过分段控制器-选择月-弹出仅有年月选择的datepicker&quot;&gt;通过分段控制器 选择月 弹出仅有年月选择的datePicker&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-5e60b344e2d393fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;通过分段控制器-选择日-弹出有年月日选择的datepicker&quot;&gt;通过分段控制器 选择日 弹出有年月日选择的datePicker&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3538284-cb5cadd7f570b6a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;实现的主要代码&quot;&gt;实现的主要代码&lt;/h1&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;datePickerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;demo下载地址-github&quot;&gt;Demo下载地址 (github)&lt;/h1&gt;
&lt;p&gt;github地址:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;swift版本  &lt;a href=&quot;https://github.com/YQqiang/DateSegmentView&quot;&gt;DateSegmentView&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;OC版本 &lt;a href=&quot;https://github.com/YQqiang/DateSegmentView-OC&quot;&gt;DateSegmentView-OC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;写在最后-本人ios开发菜鸟一枚-不妥之处还望大神指教&quot;&gt;写在最后 本人iOS开发菜鸟一枚, 不妥之处,还望大神指教~~~~~~~~~~~&lt;/h1&gt;

</description>
      </item>
    
  </channel>
</rss>